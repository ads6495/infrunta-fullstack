
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Unit` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Unit
 * 
 */
export type UnitModel = runtime.Types.Result.DefaultSelection<Prisma.$UnitPayload>

export type AggregateUnit = {
  _count: UnitCountAggregateOutputType | null
  _avg: UnitAvgAggregateOutputType | null
  _sum: UnitSumAggregateOutputType | null
  _min: UnitMinAggregateOutputType | null
  _max: UnitMaxAggregateOutputType | null
}

export type UnitAvgAggregateOutputType = {
  id: number | null
  orderNumber: number | null
  languageId: number | null
}

export type UnitSumAggregateOutputType = {
  id: number | null
  orderNumber: number | null
  languageId: number | null
}

export type UnitMinAggregateOutputType = {
  id: number | null
  orderNumber: number | null
  title: string | null
  level: $Enums.Level | null
  languageId: number | null
  objective: string | null
}

export type UnitMaxAggregateOutputType = {
  id: number | null
  orderNumber: number | null
  title: string | null
  level: $Enums.Level | null
  languageId: number | null
  objective: string | null
}

export type UnitCountAggregateOutputType = {
  id: number
  orderNumber: number
  title: number
  level: number
  languageId: number
  objective: number
  _all: number
}


export type UnitAvgAggregateInputType = {
  id?: true
  orderNumber?: true
  languageId?: true
}

export type UnitSumAggregateInputType = {
  id?: true
  orderNumber?: true
  languageId?: true
}

export type UnitMinAggregateInputType = {
  id?: true
  orderNumber?: true
  title?: true
  level?: true
  languageId?: true
  objective?: true
}

export type UnitMaxAggregateInputType = {
  id?: true
  orderNumber?: true
  title?: true
  level?: true
  languageId?: true
  objective?: true
}

export type UnitCountAggregateInputType = {
  id?: true
  orderNumber?: true
  title?: true
  level?: true
  languageId?: true
  objective?: true
  _all?: true
}

export type UnitAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Unit to aggregate.
   */
  where?: Prisma.UnitWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Units to fetch.
   */
  orderBy?: Prisma.UnitOrderByWithRelationInput | Prisma.UnitOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.UnitWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Units from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Units.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Units
  **/
  _count?: true | UnitCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: UnitAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: UnitSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: UnitMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: UnitMaxAggregateInputType
}

export type GetUnitAggregateType<T extends UnitAggregateArgs> = {
      [P in keyof T & keyof AggregateUnit]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateUnit[P]>
    : Prisma.GetScalarType<T[P], AggregateUnit[P]>
}




export type UnitGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.UnitWhereInput
  orderBy?: Prisma.UnitOrderByWithAggregationInput | Prisma.UnitOrderByWithAggregationInput[]
  by: Prisma.UnitScalarFieldEnum[] | Prisma.UnitScalarFieldEnum
  having?: Prisma.UnitScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: UnitCountAggregateInputType | true
  _avg?: UnitAvgAggregateInputType
  _sum?: UnitSumAggregateInputType
  _min?: UnitMinAggregateInputType
  _max?: UnitMaxAggregateInputType
}

export type UnitGroupByOutputType = {
  id: number
  orderNumber: number
  title: string
  level: $Enums.Level
  languageId: number
  objective: string
  _count: UnitCountAggregateOutputType | null
  _avg: UnitAvgAggregateOutputType | null
  _sum: UnitSumAggregateOutputType | null
  _min: UnitMinAggregateOutputType | null
  _max: UnitMaxAggregateOutputType | null
}

type GetUnitGroupByPayload<T extends UnitGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<UnitGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof UnitGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], UnitGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], UnitGroupByOutputType[P]>
      }
    >
  > 



export type UnitWhereInput = {
  AND?: Prisma.UnitWhereInput | Prisma.UnitWhereInput[]
  OR?: Prisma.UnitWhereInput[]
  NOT?: Prisma.UnitWhereInput | Prisma.UnitWhereInput[]
  id?: Prisma.IntFilter<"Unit"> | number
  orderNumber?: Prisma.IntFilter<"Unit"> | number
  title?: Prisma.StringFilter<"Unit"> | string
  level?: Prisma.EnumLevelFilter<"Unit"> | $Enums.Level
  languageId?: Prisma.IntFilter<"Unit"> | number
  objective?: Prisma.StringFilter<"Unit"> | string
  language?: Prisma.XOR<Prisma.LanguageScalarRelationFilter, Prisma.LanguageWhereInput>
  lessons?: Prisma.LessonListRelationFilter
}

export type UnitOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  orderNumber?: Prisma.SortOrder
  title?: Prisma.SortOrder
  level?: Prisma.SortOrder
  languageId?: Prisma.SortOrder
  objective?: Prisma.SortOrder
  language?: Prisma.LanguageOrderByWithRelationInput
  lessons?: Prisma.LessonOrderByRelationAggregateInput
}

export type UnitWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.UnitWhereInput | Prisma.UnitWhereInput[]
  OR?: Prisma.UnitWhereInput[]
  NOT?: Prisma.UnitWhereInput | Prisma.UnitWhereInput[]
  orderNumber?: Prisma.IntFilter<"Unit"> | number
  title?: Prisma.StringFilter<"Unit"> | string
  level?: Prisma.EnumLevelFilter<"Unit"> | $Enums.Level
  languageId?: Prisma.IntFilter<"Unit"> | number
  objective?: Prisma.StringFilter<"Unit"> | string
  language?: Prisma.XOR<Prisma.LanguageScalarRelationFilter, Prisma.LanguageWhereInput>
  lessons?: Prisma.LessonListRelationFilter
}, "id">

export type UnitOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  orderNumber?: Prisma.SortOrder
  title?: Prisma.SortOrder
  level?: Prisma.SortOrder
  languageId?: Prisma.SortOrder
  objective?: Prisma.SortOrder
  _count?: Prisma.UnitCountOrderByAggregateInput
  _avg?: Prisma.UnitAvgOrderByAggregateInput
  _max?: Prisma.UnitMaxOrderByAggregateInput
  _min?: Prisma.UnitMinOrderByAggregateInput
  _sum?: Prisma.UnitSumOrderByAggregateInput
}

export type UnitScalarWhereWithAggregatesInput = {
  AND?: Prisma.UnitScalarWhereWithAggregatesInput | Prisma.UnitScalarWhereWithAggregatesInput[]
  OR?: Prisma.UnitScalarWhereWithAggregatesInput[]
  NOT?: Prisma.UnitScalarWhereWithAggregatesInput | Prisma.UnitScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Unit"> | number
  orderNumber?: Prisma.IntWithAggregatesFilter<"Unit"> | number
  title?: Prisma.StringWithAggregatesFilter<"Unit"> | string
  level?: Prisma.EnumLevelWithAggregatesFilter<"Unit"> | $Enums.Level
  languageId?: Prisma.IntWithAggregatesFilter<"Unit"> | number
  objective?: Prisma.StringWithAggregatesFilter<"Unit"> | string
}

export type UnitCreateInput = {
  orderNumber: number
  title: string
  level?: $Enums.Level
  objective: string
  language: Prisma.LanguageCreateNestedOneWithoutUnitsInput
  lessons?: Prisma.LessonCreateNestedManyWithoutUnitInput
}

export type UnitUncheckedCreateInput = {
  id?: number
  orderNumber: number
  title: string
  level?: $Enums.Level
  languageId: number
  objective: string
  lessons?: Prisma.LessonUncheckedCreateNestedManyWithoutUnitInput
}

export type UnitUpdateInput = {
  orderNumber?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  level?: Prisma.EnumLevelFieldUpdateOperationsInput | $Enums.Level
  objective?: Prisma.StringFieldUpdateOperationsInput | string
  language?: Prisma.LanguageUpdateOneRequiredWithoutUnitsNestedInput
  lessons?: Prisma.LessonUpdateManyWithoutUnitNestedInput
}

export type UnitUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  orderNumber?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  level?: Prisma.EnumLevelFieldUpdateOperationsInput | $Enums.Level
  languageId?: Prisma.IntFieldUpdateOperationsInput | number
  objective?: Prisma.StringFieldUpdateOperationsInput | string
  lessons?: Prisma.LessonUncheckedUpdateManyWithoutUnitNestedInput
}

export type UnitCreateManyInput = {
  id?: number
  orderNumber: number
  title: string
  level?: $Enums.Level
  languageId: number
  objective: string
}

export type UnitUpdateManyMutationInput = {
  orderNumber?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  level?: Prisma.EnumLevelFieldUpdateOperationsInput | $Enums.Level
  objective?: Prisma.StringFieldUpdateOperationsInput | string
}

export type UnitUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  orderNumber?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  level?: Prisma.EnumLevelFieldUpdateOperationsInput | $Enums.Level
  languageId?: Prisma.IntFieldUpdateOperationsInput | number
  objective?: Prisma.StringFieldUpdateOperationsInput | string
}

export type UnitListRelationFilter = {
  every?: Prisma.UnitWhereInput
  some?: Prisma.UnitWhereInput
  none?: Prisma.UnitWhereInput
}

export type UnitOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type UnitCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  orderNumber?: Prisma.SortOrder
  title?: Prisma.SortOrder
  level?: Prisma.SortOrder
  languageId?: Prisma.SortOrder
  objective?: Prisma.SortOrder
}

export type UnitAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  orderNumber?: Prisma.SortOrder
  languageId?: Prisma.SortOrder
}

export type UnitMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  orderNumber?: Prisma.SortOrder
  title?: Prisma.SortOrder
  level?: Prisma.SortOrder
  languageId?: Prisma.SortOrder
  objective?: Prisma.SortOrder
}

export type UnitMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  orderNumber?: Prisma.SortOrder
  title?: Prisma.SortOrder
  level?: Prisma.SortOrder
  languageId?: Prisma.SortOrder
  objective?: Prisma.SortOrder
}

export type UnitSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  orderNumber?: Prisma.SortOrder
  languageId?: Prisma.SortOrder
}

export type UnitScalarRelationFilter = {
  is?: Prisma.UnitWhereInput
  isNot?: Prisma.UnitWhereInput
}

export type UnitCreateNestedManyWithoutLanguageInput = {
  create?: Prisma.XOR<Prisma.UnitCreateWithoutLanguageInput, Prisma.UnitUncheckedCreateWithoutLanguageInput> | Prisma.UnitCreateWithoutLanguageInput[] | Prisma.UnitUncheckedCreateWithoutLanguageInput[]
  connectOrCreate?: Prisma.UnitCreateOrConnectWithoutLanguageInput | Prisma.UnitCreateOrConnectWithoutLanguageInput[]
  createMany?: Prisma.UnitCreateManyLanguageInputEnvelope
  connect?: Prisma.UnitWhereUniqueInput | Prisma.UnitWhereUniqueInput[]
}

export type UnitUncheckedCreateNestedManyWithoutLanguageInput = {
  create?: Prisma.XOR<Prisma.UnitCreateWithoutLanguageInput, Prisma.UnitUncheckedCreateWithoutLanguageInput> | Prisma.UnitCreateWithoutLanguageInput[] | Prisma.UnitUncheckedCreateWithoutLanguageInput[]
  connectOrCreate?: Prisma.UnitCreateOrConnectWithoutLanguageInput | Prisma.UnitCreateOrConnectWithoutLanguageInput[]
  createMany?: Prisma.UnitCreateManyLanguageInputEnvelope
  connect?: Prisma.UnitWhereUniqueInput | Prisma.UnitWhereUniqueInput[]
}

export type UnitUpdateManyWithoutLanguageNestedInput = {
  create?: Prisma.XOR<Prisma.UnitCreateWithoutLanguageInput, Prisma.UnitUncheckedCreateWithoutLanguageInput> | Prisma.UnitCreateWithoutLanguageInput[] | Prisma.UnitUncheckedCreateWithoutLanguageInput[]
  connectOrCreate?: Prisma.UnitCreateOrConnectWithoutLanguageInput | Prisma.UnitCreateOrConnectWithoutLanguageInput[]
  upsert?: Prisma.UnitUpsertWithWhereUniqueWithoutLanguageInput | Prisma.UnitUpsertWithWhereUniqueWithoutLanguageInput[]
  createMany?: Prisma.UnitCreateManyLanguageInputEnvelope
  set?: Prisma.UnitWhereUniqueInput | Prisma.UnitWhereUniqueInput[]
  disconnect?: Prisma.UnitWhereUniqueInput | Prisma.UnitWhereUniqueInput[]
  delete?: Prisma.UnitWhereUniqueInput | Prisma.UnitWhereUniqueInput[]
  connect?: Prisma.UnitWhereUniqueInput | Prisma.UnitWhereUniqueInput[]
  update?: Prisma.UnitUpdateWithWhereUniqueWithoutLanguageInput | Prisma.UnitUpdateWithWhereUniqueWithoutLanguageInput[]
  updateMany?: Prisma.UnitUpdateManyWithWhereWithoutLanguageInput | Prisma.UnitUpdateManyWithWhereWithoutLanguageInput[]
  deleteMany?: Prisma.UnitScalarWhereInput | Prisma.UnitScalarWhereInput[]
}

export type UnitUncheckedUpdateManyWithoutLanguageNestedInput = {
  create?: Prisma.XOR<Prisma.UnitCreateWithoutLanguageInput, Prisma.UnitUncheckedCreateWithoutLanguageInput> | Prisma.UnitCreateWithoutLanguageInput[] | Prisma.UnitUncheckedCreateWithoutLanguageInput[]
  connectOrCreate?: Prisma.UnitCreateOrConnectWithoutLanguageInput | Prisma.UnitCreateOrConnectWithoutLanguageInput[]
  upsert?: Prisma.UnitUpsertWithWhereUniqueWithoutLanguageInput | Prisma.UnitUpsertWithWhereUniqueWithoutLanguageInput[]
  createMany?: Prisma.UnitCreateManyLanguageInputEnvelope
  set?: Prisma.UnitWhereUniqueInput | Prisma.UnitWhereUniqueInput[]
  disconnect?: Prisma.UnitWhereUniqueInput | Prisma.UnitWhereUniqueInput[]
  delete?: Prisma.UnitWhereUniqueInput | Prisma.UnitWhereUniqueInput[]
  connect?: Prisma.UnitWhereUniqueInput | Prisma.UnitWhereUniqueInput[]
  update?: Prisma.UnitUpdateWithWhereUniqueWithoutLanguageInput | Prisma.UnitUpdateWithWhereUniqueWithoutLanguageInput[]
  updateMany?: Prisma.UnitUpdateManyWithWhereWithoutLanguageInput | Prisma.UnitUpdateManyWithWhereWithoutLanguageInput[]
  deleteMany?: Prisma.UnitScalarWhereInput | Prisma.UnitScalarWhereInput[]
}

export type EnumLevelFieldUpdateOperationsInput = {
  set?: $Enums.Level
}

export type UnitCreateNestedOneWithoutLessonsInput = {
  create?: Prisma.XOR<Prisma.UnitCreateWithoutLessonsInput, Prisma.UnitUncheckedCreateWithoutLessonsInput>
  connectOrCreate?: Prisma.UnitCreateOrConnectWithoutLessonsInput
  connect?: Prisma.UnitWhereUniqueInput
}

export type UnitUpdateOneRequiredWithoutLessonsNestedInput = {
  create?: Prisma.XOR<Prisma.UnitCreateWithoutLessonsInput, Prisma.UnitUncheckedCreateWithoutLessonsInput>
  connectOrCreate?: Prisma.UnitCreateOrConnectWithoutLessonsInput
  upsert?: Prisma.UnitUpsertWithoutLessonsInput
  connect?: Prisma.UnitWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.UnitUpdateToOneWithWhereWithoutLessonsInput, Prisma.UnitUpdateWithoutLessonsInput>, Prisma.UnitUncheckedUpdateWithoutLessonsInput>
}

export type UnitCreateWithoutLanguageInput = {
  orderNumber: number
  title: string
  level?: $Enums.Level
  objective: string
  lessons?: Prisma.LessonCreateNestedManyWithoutUnitInput
}

export type UnitUncheckedCreateWithoutLanguageInput = {
  id?: number
  orderNumber: number
  title: string
  level?: $Enums.Level
  objective: string
  lessons?: Prisma.LessonUncheckedCreateNestedManyWithoutUnitInput
}

export type UnitCreateOrConnectWithoutLanguageInput = {
  where: Prisma.UnitWhereUniqueInput
  create: Prisma.XOR<Prisma.UnitCreateWithoutLanguageInput, Prisma.UnitUncheckedCreateWithoutLanguageInput>
}

export type UnitCreateManyLanguageInputEnvelope = {
  data: Prisma.UnitCreateManyLanguageInput | Prisma.UnitCreateManyLanguageInput[]
  skipDuplicates?: boolean
}

export type UnitUpsertWithWhereUniqueWithoutLanguageInput = {
  where: Prisma.UnitWhereUniqueInput
  update: Prisma.XOR<Prisma.UnitUpdateWithoutLanguageInput, Prisma.UnitUncheckedUpdateWithoutLanguageInput>
  create: Prisma.XOR<Prisma.UnitCreateWithoutLanguageInput, Prisma.UnitUncheckedCreateWithoutLanguageInput>
}

export type UnitUpdateWithWhereUniqueWithoutLanguageInput = {
  where: Prisma.UnitWhereUniqueInput
  data: Prisma.XOR<Prisma.UnitUpdateWithoutLanguageInput, Prisma.UnitUncheckedUpdateWithoutLanguageInput>
}

export type UnitUpdateManyWithWhereWithoutLanguageInput = {
  where: Prisma.UnitScalarWhereInput
  data: Prisma.XOR<Prisma.UnitUpdateManyMutationInput, Prisma.UnitUncheckedUpdateManyWithoutLanguageInput>
}

export type UnitScalarWhereInput = {
  AND?: Prisma.UnitScalarWhereInput | Prisma.UnitScalarWhereInput[]
  OR?: Prisma.UnitScalarWhereInput[]
  NOT?: Prisma.UnitScalarWhereInput | Prisma.UnitScalarWhereInput[]
  id?: Prisma.IntFilter<"Unit"> | number
  orderNumber?: Prisma.IntFilter<"Unit"> | number
  title?: Prisma.StringFilter<"Unit"> | string
  level?: Prisma.EnumLevelFilter<"Unit"> | $Enums.Level
  languageId?: Prisma.IntFilter<"Unit"> | number
  objective?: Prisma.StringFilter<"Unit"> | string
}

export type UnitCreateWithoutLessonsInput = {
  orderNumber: number
  title: string
  level?: $Enums.Level
  objective: string
  language: Prisma.LanguageCreateNestedOneWithoutUnitsInput
}

export type UnitUncheckedCreateWithoutLessonsInput = {
  id?: number
  orderNumber: number
  title: string
  level?: $Enums.Level
  languageId: number
  objective: string
}

export type UnitCreateOrConnectWithoutLessonsInput = {
  where: Prisma.UnitWhereUniqueInput
  create: Prisma.XOR<Prisma.UnitCreateWithoutLessonsInput, Prisma.UnitUncheckedCreateWithoutLessonsInput>
}

export type UnitUpsertWithoutLessonsInput = {
  update: Prisma.XOR<Prisma.UnitUpdateWithoutLessonsInput, Prisma.UnitUncheckedUpdateWithoutLessonsInput>
  create: Prisma.XOR<Prisma.UnitCreateWithoutLessonsInput, Prisma.UnitUncheckedCreateWithoutLessonsInput>
  where?: Prisma.UnitWhereInput
}

export type UnitUpdateToOneWithWhereWithoutLessonsInput = {
  where?: Prisma.UnitWhereInput
  data: Prisma.XOR<Prisma.UnitUpdateWithoutLessonsInput, Prisma.UnitUncheckedUpdateWithoutLessonsInput>
}

export type UnitUpdateWithoutLessonsInput = {
  orderNumber?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  level?: Prisma.EnumLevelFieldUpdateOperationsInput | $Enums.Level
  objective?: Prisma.StringFieldUpdateOperationsInput | string
  language?: Prisma.LanguageUpdateOneRequiredWithoutUnitsNestedInput
}

export type UnitUncheckedUpdateWithoutLessonsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  orderNumber?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  level?: Prisma.EnumLevelFieldUpdateOperationsInput | $Enums.Level
  languageId?: Prisma.IntFieldUpdateOperationsInput | number
  objective?: Prisma.StringFieldUpdateOperationsInput | string
}

export type UnitCreateManyLanguageInput = {
  id?: number
  orderNumber: number
  title: string
  level?: $Enums.Level
  objective: string
}

export type UnitUpdateWithoutLanguageInput = {
  orderNumber?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  level?: Prisma.EnumLevelFieldUpdateOperationsInput | $Enums.Level
  objective?: Prisma.StringFieldUpdateOperationsInput | string
  lessons?: Prisma.LessonUpdateManyWithoutUnitNestedInput
}

export type UnitUncheckedUpdateWithoutLanguageInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  orderNumber?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  level?: Prisma.EnumLevelFieldUpdateOperationsInput | $Enums.Level
  objective?: Prisma.StringFieldUpdateOperationsInput | string
  lessons?: Prisma.LessonUncheckedUpdateManyWithoutUnitNestedInput
}

export type UnitUncheckedUpdateManyWithoutLanguageInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  orderNumber?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  level?: Prisma.EnumLevelFieldUpdateOperationsInput | $Enums.Level
  objective?: Prisma.StringFieldUpdateOperationsInput | string
}


/**
 * Count Type UnitCountOutputType
 */

export type UnitCountOutputType = {
  lessons: number
}

export type UnitCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  lessons?: boolean | UnitCountOutputTypeCountLessonsArgs
}

/**
 * UnitCountOutputType without action
 */
export type UnitCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UnitCountOutputType
   */
  select?: Prisma.UnitCountOutputTypeSelect<ExtArgs> | null
}

/**
 * UnitCountOutputType without action
 */
export type UnitCountOutputTypeCountLessonsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.LessonWhereInput
}


export type UnitSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  orderNumber?: boolean
  title?: boolean
  level?: boolean
  languageId?: boolean
  objective?: boolean
  language?: boolean | Prisma.LanguageDefaultArgs<ExtArgs>
  lessons?: boolean | Prisma.Unit$lessonsArgs<ExtArgs>
  _count?: boolean | Prisma.UnitCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["unit"]>

export type UnitSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  orderNumber?: boolean
  title?: boolean
  level?: boolean
  languageId?: boolean
  objective?: boolean
  language?: boolean | Prisma.LanguageDefaultArgs<ExtArgs>
}, ExtArgs["result"]["unit"]>

export type UnitSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  orderNumber?: boolean
  title?: boolean
  level?: boolean
  languageId?: boolean
  objective?: boolean
  language?: boolean | Prisma.LanguageDefaultArgs<ExtArgs>
}, ExtArgs["result"]["unit"]>

export type UnitSelectScalar = {
  id?: boolean
  orderNumber?: boolean
  title?: boolean
  level?: boolean
  languageId?: boolean
  objective?: boolean
}

export type UnitOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "orderNumber" | "title" | "level" | "languageId" | "objective", ExtArgs["result"]["unit"]>
export type UnitInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  language?: boolean | Prisma.LanguageDefaultArgs<ExtArgs>
  lessons?: boolean | Prisma.Unit$lessonsArgs<ExtArgs>
  _count?: boolean | Prisma.UnitCountOutputTypeDefaultArgs<ExtArgs>
}
export type UnitIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  language?: boolean | Prisma.LanguageDefaultArgs<ExtArgs>
}
export type UnitIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  language?: boolean | Prisma.LanguageDefaultArgs<ExtArgs>
}

export type $UnitPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Unit"
  objects: {
    language: Prisma.$LanguagePayload<ExtArgs>
    lessons: Prisma.$LessonPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    orderNumber: number
    title: string
    level: $Enums.Level
    languageId: number
    objective: string
  }, ExtArgs["result"]["unit"]>
  composites: {}
}

export type UnitGetPayload<S extends boolean | null | undefined | UnitDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$UnitPayload, S>

export type UnitCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<UnitFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: UnitCountAggregateInputType | true
  }

export interface UnitDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Unit'], meta: { name: 'Unit' } }
  /**
   * Find zero or one Unit that matches the filter.
   * @param {UnitFindUniqueArgs} args - Arguments to find a Unit
   * @example
   * // Get one Unit
   * const unit = await prisma.unit.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends UnitFindUniqueArgs>(args: Prisma.SelectSubset<T, UnitFindUniqueArgs<ExtArgs>>): Prisma.Prisma__UnitClient<runtime.Types.Result.GetResult<Prisma.$UnitPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Unit that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {UnitFindUniqueOrThrowArgs} args - Arguments to find a Unit
   * @example
   * // Get one Unit
   * const unit = await prisma.unit.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends UnitFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, UnitFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__UnitClient<runtime.Types.Result.GetResult<Prisma.$UnitPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Unit that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UnitFindFirstArgs} args - Arguments to find a Unit
   * @example
   * // Get one Unit
   * const unit = await prisma.unit.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends UnitFindFirstArgs>(args?: Prisma.SelectSubset<T, UnitFindFirstArgs<ExtArgs>>): Prisma.Prisma__UnitClient<runtime.Types.Result.GetResult<Prisma.$UnitPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Unit that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UnitFindFirstOrThrowArgs} args - Arguments to find a Unit
   * @example
   * // Get one Unit
   * const unit = await prisma.unit.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends UnitFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, UnitFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__UnitClient<runtime.Types.Result.GetResult<Prisma.$UnitPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Units that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UnitFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Units
   * const units = await prisma.unit.findMany()
   * 
   * // Get first 10 Units
   * const units = await prisma.unit.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const unitWithIdOnly = await prisma.unit.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends UnitFindManyArgs>(args?: Prisma.SelectSubset<T, UnitFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UnitPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Unit.
   * @param {UnitCreateArgs} args - Arguments to create a Unit.
   * @example
   * // Create one Unit
   * const Unit = await prisma.unit.create({
   *   data: {
   *     // ... data to create a Unit
   *   }
   * })
   * 
   */
  create<T extends UnitCreateArgs>(args: Prisma.SelectSubset<T, UnitCreateArgs<ExtArgs>>): Prisma.Prisma__UnitClient<runtime.Types.Result.GetResult<Prisma.$UnitPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Units.
   * @param {UnitCreateManyArgs} args - Arguments to create many Units.
   * @example
   * // Create many Units
   * const unit = await prisma.unit.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends UnitCreateManyArgs>(args?: Prisma.SelectSubset<T, UnitCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Units and returns the data saved in the database.
   * @param {UnitCreateManyAndReturnArgs} args - Arguments to create many Units.
   * @example
   * // Create many Units
   * const unit = await prisma.unit.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Units and only return the `id`
   * const unitWithIdOnly = await prisma.unit.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends UnitCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, UnitCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UnitPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Unit.
   * @param {UnitDeleteArgs} args - Arguments to delete one Unit.
   * @example
   * // Delete one Unit
   * const Unit = await prisma.unit.delete({
   *   where: {
   *     // ... filter to delete one Unit
   *   }
   * })
   * 
   */
  delete<T extends UnitDeleteArgs>(args: Prisma.SelectSubset<T, UnitDeleteArgs<ExtArgs>>): Prisma.Prisma__UnitClient<runtime.Types.Result.GetResult<Prisma.$UnitPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Unit.
   * @param {UnitUpdateArgs} args - Arguments to update one Unit.
   * @example
   * // Update one Unit
   * const unit = await prisma.unit.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends UnitUpdateArgs>(args: Prisma.SelectSubset<T, UnitUpdateArgs<ExtArgs>>): Prisma.Prisma__UnitClient<runtime.Types.Result.GetResult<Prisma.$UnitPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Units.
   * @param {UnitDeleteManyArgs} args - Arguments to filter Units to delete.
   * @example
   * // Delete a few Units
   * const { count } = await prisma.unit.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends UnitDeleteManyArgs>(args?: Prisma.SelectSubset<T, UnitDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Units.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UnitUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Units
   * const unit = await prisma.unit.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends UnitUpdateManyArgs>(args: Prisma.SelectSubset<T, UnitUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Units and returns the data updated in the database.
   * @param {UnitUpdateManyAndReturnArgs} args - Arguments to update many Units.
   * @example
   * // Update many Units
   * const unit = await prisma.unit.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Units and only return the `id`
   * const unitWithIdOnly = await prisma.unit.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends UnitUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, UnitUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UnitPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Unit.
   * @param {UnitUpsertArgs} args - Arguments to update or create a Unit.
   * @example
   * // Update or create a Unit
   * const unit = await prisma.unit.upsert({
   *   create: {
   *     // ... data to create a Unit
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Unit we want to update
   *   }
   * })
   */
  upsert<T extends UnitUpsertArgs>(args: Prisma.SelectSubset<T, UnitUpsertArgs<ExtArgs>>): Prisma.Prisma__UnitClient<runtime.Types.Result.GetResult<Prisma.$UnitPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Units.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UnitCountArgs} args - Arguments to filter Units to count.
   * @example
   * // Count the number of Units
   * const count = await prisma.unit.count({
   *   where: {
   *     // ... the filter for the Units we want to count
   *   }
   * })
  **/
  count<T extends UnitCountArgs>(
    args?: Prisma.Subset<T, UnitCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], UnitCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Unit.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UnitAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends UnitAggregateArgs>(args: Prisma.Subset<T, UnitAggregateArgs>): Prisma.PrismaPromise<GetUnitAggregateType<T>>

  /**
   * Group by Unit.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UnitGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends UnitGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: UnitGroupByArgs['orderBy'] }
      : { orderBy?: UnitGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, UnitGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUnitGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Unit model
 */
readonly fields: UnitFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Unit.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__UnitClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  language<T extends Prisma.LanguageDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.LanguageDefaultArgs<ExtArgs>>): Prisma.Prisma__LanguageClient<runtime.Types.Result.GetResult<Prisma.$LanguagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  lessons<T extends Prisma.Unit$lessonsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Unit$lessonsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$LessonPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Unit model
 */
export interface UnitFieldRefs {
  readonly id: Prisma.FieldRef<"Unit", 'Int'>
  readonly orderNumber: Prisma.FieldRef<"Unit", 'Int'>
  readonly title: Prisma.FieldRef<"Unit", 'String'>
  readonly level: Prisma.FieldRef<"Unit", 'Level'>
  readonly languageId: Prisma.FieldRef<"Unit", 'Int'>
  readonly objective: Prisma.FieldRef<"Unit", 'String'>
}
    

// Custom InputTypes
/**
 * Unit findUnique
 */
export type UnitFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Unit
   */
  select?: Prisma.UnitSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Unit
   */
  omit?: Prisma.UnitOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UnitInclude<ExtArgs> | null
  /**
   * Filter, which Unit to fetch.
   */
  where: Prisma.UnitWhereUniqueInput
}

/**
 * Unit findUniqueOrThrow
 */
export type UnitFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Unit
   */
  select?: Prisma.UnitSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Unit
   */
  omit?: Prisma.UnitOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UnitInclude<ExtArgs> | null
  /**
   * Filter, which Unit to fetch.
   */
  where: Prisma.UnitWhereUniqueInput
}

/**
 * Unit findFirst
 */
export type UnitFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Unit
   */
  select?: Prisma.UnitSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Unit
   */
  omit?: Prisma.UnitOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UnitInclude<ExtArgs> | null
  /**
   * Filter, which Unit to fetch.
   */
  where?: Prisma.UnitWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Units to fetch.
   */
  orderBy?: Prisma.UnitOrderByWithRelationInput | Prisma.UnitOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Units.
   */
  cursor?: Prisma.UnitWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Units from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Units.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Units.
   */
  distinct?: Prisma.UnitScalarFieldEnum | Prisma.UnitScalarFieldEnum[]
}

/**
 * Unit findFirstOrThrow
 */
export type UnitFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Unit
   */
  select?: Prisma.UnitSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Unit
   */
  omit?: Prisma.UnitOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UnitInclude<ExtArgs> | null
  /**
   * Filter, which Unit to fetch.
   */
  where?: Prisma.UnitWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Units to fetch.
   */
  orderBy?: Prisma.UnitOrderByWithRelationInput | Prisma.UnitOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Units.
   */
  cursor?: Prisma.UnitWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Units from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Units.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Units.
   */
  distinct?: Prisma.UnitScalarFieldEnum | Prisma.UnitScalarFieldEnum[]
}

/**
 * Unit findMany
 */
export type UnitFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Unit
   */
  select?: Prisma.UnitSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Unit
   */
  omit?: Prisma.UnitOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UnitInclude<ExtArgs> | null
  /**
   * Filter, which Units to fetch.
   */
  where?: Prisma.UnitWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Units to fetch.
   */
  orderBy?: Prisma.UnitOrderByWithRelationInput | Prisma.UnitOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Units.
   */
  cursor?: Prisma.UnitWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Units from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Units.
   */
  skip?: number
  distinct?: Prisma.UnitScalarFieldEnum | Prisma.UnitScalarFieldEnum[]
}

/**
 * Unit create
 */
export type UnitCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Unit
   */
  select?: Prisma.UnitSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Unit
   */
  omit?: Prisma.UnitOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UnitInclude<ExtArgs> | null
  /**
   * The data needed to create a Unit.
   */
  data: Prisma.XOR<Prisma.UnitCreateInput, Prisma.UnitUncheckedCreateInput>
}

/**
 * Unit createMany
 */
export type UnitCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Units.
   */
  data: Prisma.UnitCreateManyInput | Prisma.UnitCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Unit createManyAndReturn
 */
export type UnitCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Unit
   */
  select?: Prisma.UnitSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Unit
   */
  omit?: Prisma.UnitOmit<ExtArgs> | null
  /**
   * The data used to create many Units.
   */
  data: Prisma.UnitCreateManyInput | Prisma.UnitCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UnitIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Unit update
 */
export type UnitUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Unit
   */
  select?: Prisma.UnitSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Unit
   */
  omit?: Prisma.UnitOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UnitInclude<ExtArgs> | null
  /**
   * The data needed to update a Unit.
   */
  data: Prisma.XOR<Prisma.UnitUpdateInput, Prisma.UnitUncheckedUpdateInput>
  /**
   * Choose, which Unit to update.
   */
  where: Prisma.UnitWhereUniqueInput
}

/**
 * Unit updateMany
 */
export type UnitUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Units.
   */
  data: Prisma.XOR<Prisma.UnitUpdateManyMutationInput, Prisma.UnitUncheckedUpdateManyInput>
  /**
   * Filter which Units to update
   */
  where?: Prisma.UnitWhereInput
  /**
   * Limit how many Units to update.
   */
  limit?: number
}

/**
 * Unit updateManyAndReturn
 */
export type UnitUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Unit
   */
  select?: Prisma.UnitSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Unit
   */
  omit?: Prisma.UnitOmit<ExtArgs> | null
  /**
   * The data used to update Units.
   */
  data: Prisma.XOR<Prisma.UnitUpdateManyMutationInput, Prisma.UnitUncheckedUpdateManyInput>
  /**
   * Filter which Units to update
   */
  where?: Prisma.UnitWhereInput
  /**
   * Limit how many Units to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UnitIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Unit upsert
 */
export type UnitUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Unit
   */
  select?: Prisma.UnitSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Unit
   */
  omit?: Prisma.UnitOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UnitInclude<ExtArgs> | null
  /**
   * The filter to search for the Unit to update in case it exists.
   */
  where: Prisma.UnitWhereUniqueInput
  /**
   * In case the Unit found by the `where` argument doesn't exist, create a new Unit with this data.
   */
  create: Prisma.XOR<Prisma.UnitCreateInput, Prisma.UnitUncheckedCreateInput>
  /**
   * In case the Unit was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.UnitUpdateInput, Prisma.UnitUncheckedUpdateInput>
}

/**
 * Unit delete
 */
export type UnitDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Unit
   */
  select?: Prisma.UnitSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Unit
   */
  omit?: Prisma.UnitOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UnitInclude<ExtArgs> | null
  /**
   * Filter which Unit to delete.
   */
  where: Prisma.UnitWhereUniqueInput
}

/**
 * Unit deleteMany
 */
export type UnitDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Units to delete
   */
  where?: Prisma.UnitWhereInput
  /**
   * Limit how many Units to delete.
   */
  limit?: number
}

/**
 * Unit.lessons
 */
export type Unit$lessonsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Lesson
   */
  select?: Prisma.LessonSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Lesson
   */
  omit?: Prisma.LessonOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LessonInclude<ExtArgs> | null
  where?: Prisma.LessonWhereInput
  orderBy?: Prisma.LessonOrderByWithRelationInput | Prisma.LessonOrderByWithRelationInput[]
  cursor?: Prisma.LessonWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.LessonScalarFieldEnum | Prisma.LessonScalarFieldEnum[]
}

/**
 * Unit without action
 */
export type UnitDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Unit
   */
  select?: Prisma.UnitSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Unit
   */
  omit?: Prisma.UnitOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UnitInclude<ExtArgs> | null
}
