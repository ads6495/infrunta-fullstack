
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `UserLessonProgress` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model UserLessonProgress
 * 
 */
export type UserLessonProgressModel = runtime.Types.Result.DefaultSelection<Prisma.$UserLessonProgressPayload>

export type AggregateUserLessonProgress = {
  _count: UserLessonProgressCountAggregateOutputType | null
  _avg: UserLessonProgressAvgAggregateOutputType | null
  _sum: UserLessonProgressSumAggregateOutputType | null
  _min: UserLessonProgressMinAggregateOutputType | null
  _max: UserLessonProgressMaxAggregateOutputType | null
}

export type UserLessonProgressAvgAggregateOutputType = {
  lessonId: number | null
}

export type UserLessonProgressSumAggregateOutputType = {
  lessonId: number | null
}

export type UserLessonProgressMinAggregateOutputType = {
  id: string | null
  completed: boolean | null
  lastAccessed: Date | null
  userId: string | null
  lessonId: number | null
}

export type UserLessonProgressMaxAggregateOutputType = {
  id: string | null
  completed: boolean | null
  lastAccessed: Date | null
  userId: string | null
  lessonId: number | null
}

export type UserLessonProgressCountAggregateOutputType = {
  id: number
  completed: number
  lastAccessed: number
  userId: number
  lessonId: number
  _all: number
}


export type UserLessonProgressAvgAggregateInputType = {
  lessonId?: true
}

export type UserLessonProgressSumAggregateInputType = {
  lessonId?: true
}

export type UserLessonProgressMinAggregateInputType = {
  id?: true
  completed?: true
  lastAccessed?: true
  userId?: true
  lessonId?: true
}

export type UserLessonProgressMaxAggregateInputType = {
  id?: true
  completed?: true
  lastAccessed?: true
  userId?: true
  lessonId?: true
}

export type UserLessonProgressCountAggregateInputType = {
  id?: true
  completed?: true
  lastAccessed?: true
  userId?: true
  lessonId?: true
  _all?: true
}

export type UserLessonProgressAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which UserLessonProgress to aggregate.
   */
  where?: Prisma.UserLessonProgressWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserLessonProgresses to fetch.
   */
  orderBy?: Prisma.UserLessonProgressOrderByWithRelationInput | Prisma.UserLessonProgressOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.UserLessonProgressWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserLessonProgresses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserLessonProgresses.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned UserLessonProgresses
  **/
  _count?: true | UserLessonProgressCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: UserLessonProgressAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: UserLessonProgressSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: UserLessonProgressMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: UserLessonProgressMaxAggregateInputType
}

export type GetUserLessonProgressAggregateType<T extends UserLessonProgressAggregateArgs> = {
      [P in keyof T & keyof AggregateUserLessonProgress]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateUserLessonProgress[P]>
    : Prisma.GetScalarType<T[P], AggregateUserLessonProgress[P]>
}




export type UserLessonProgressGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.UserLessonProgressWhereInput
  orderBy?: Prisma.UserLessonProgressOrderByWithAggregationInput | Prisma.UserLessonProgressOrderByWithAggregationInput[]
  by: Prisma.UserLessonProgressScalarFieldEnum[] | Prisma.UserLessonProgressScalarFieldEnum
  having?: Prisma.UserLessonProgressScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: UserLessonProgressCountAggregateInputType | true
  _avg?: UserLessonProgressAvgAggregateInputType
  _sum?: UserLessonProgressSumAggregateInputType
  _min?: UserLessonProgressMinAggregateInputType
  _max?: UserLessonProgressMaxAggregateInputType
}

export type UserLessonProgressGroupByOutputType = {
  id: string
  completed: boolean
  lastAccessed: Date
  userId: string
  lessonId: number
  _count: UserLessonProgressCountAggregateOutputType | null
  _avg: UserLessonProgressAvgAggregateOutputType | null
  _sum: UserLessonProgressSumAggregateOutputType | null
  _min: UserLessonProgressMinAggregateOutputType | null
  _max: UserLessonProgressMaxAggregateOutputType | null
}

type GetUserLessonProgressGroupByPayload<T extends UserLessonProgressGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<UserLessonProgressGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof UserLessonProgressGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], UserLessonProgressGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], UserLessonProgressGroupByOutputType[P]>
      }
    >
  > 



export type UserLessonProgressWhereInput = {
  AND?: Prisma.UserLessonProgressWhereInput | Prisma.UserLessonProgressWhereInput[]
  OR?: Prisma.UserLessonProgressWhereInput[]
  NOT?: Prisma.UserLessonProgressWhereInput | Prisma.UserLessonProgressWhereInput[]
  id?: Prisma.StringFilter<"UserLessonProgress"> | string
  completed?: Prisma.BoolFilter<"UserLessonProgress"> | boolean
  lastAccessed?: Prisma.DateTimeFilter<"UserLessonProgress"> | Date | string
  userId?: Prisma.StringFilter<"UserLessonProgress"> | string
  lessonId?: Prisma.IntFilter<"UserLessonProgress"> | number
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  lesson?: Prisma.XOR<Prisma.LessonScalarRelationFilter, Prisma.LessonWhereInput>
}

export type UserLessonProgressOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  completed?: Prisma.SortOrder
  lastAccessed?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  lessonId?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
  lesson?: Prisma.LessonOrderByWithRelationInput
}

export type UserLessonProgressWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  userId_lessonId?: Prisma.UserLessonProgressUserIdLessonIdCompoundUniqueInput
  AND?: Prisma.UserLessonProgressWhereInput | Prisma.UserLessonProgressWhereInput[]
  OR?: Prisma.UserLessonProgressWhereInput[]
  NOT?: Prisma.UserLessonProgressWhereInput | Prisma.UserLessonProgressWhereInput[]
  completed?: Prisma.BoolFilter<"UserLessonProgress"> | boolean
  lastAccessed?: Prisma.DateTimeFilter<"UserLessonProgress"> | Date | string
  userId?: Prisma.StringFilter<"UserLessonProgress"> | string
  lessonId?: Prisma.IntFilter<"UserLessonProgress"> | number
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  lesson?: Prisma.XOR<Prisma.LessonScalarRelationFilter, Prisma.LessonWhereInput>
}, "id" | "userId_lessonId">

export type UserLessonProgressOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  completed?: Prisma.SortOrder
  lastAccessed?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  lessonId?: Prisma.SortOrder
  _count?: Prisma.UserLessonProgressCountOrderByAggregateInput
  _avg?: Prisma.UserLessonProgressAvgOrderByAggregateInput
  _max?: Prisma.UserLessonProgressMaxOrderByAggregateInput
  _min?: Prisma.UserLessonProgressMinOrderByAggregateInput
  _sum?: Prisma.UserLessonProgressSumOrderByAggregateInput
}

export type UserLessonProgressScalarWhereWithAggregatesInput = {
  AND?: Prisma.UserLessonProgressScalarWhereWithAggregatesInput | Prisma.UserLessonProgressScalarWhereWithAggregatesInput[]
  OR?: Prisma.UserLessonProgressScalarWhereWithAggregatesInput[]
  NOT?: Prisma.UserLessonProgressScalarWhereWithAggregatesInput | Prisma.UserLessonProgressScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"UserLessonProgress"> | string
  completed?: Prisma.BoolWithAggregatesFilter<"UserLessonProgress"> | boolean
  lastAccessed?: Prisma.DateTimeWithAggregatesFilter<"UserLessonProgress"> | Date | string
  userId?: Prisma.StringWithAggregatesFilter<"UserLessonProgress"> | string
  lessonId?: Prisma.IntWithAggregatesFilter<"UserLessonProgress"> | number
}

export type UserLessonProgressCreateInput = {
  id?: string
  completed?: boolean
  lastAccessed?: Date | string
  user: Prisma.UserCreateNestedOneWithoutLessonProgressInput
  lesson: Prisma.LessonCreateNestedOneWithoutProgressInput
}

export type UserLessonProgressUncheckedCreateInput = {
  id?: string
  completed?: boolean
  lastAccessed?: Date | string
  userId: string
  lessonId: number
}

export type UserLessonProgressUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  completed?: Prisma.BoolFieldUpdateOperationsInput | boolean
  lastAccessed?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutLessonProgressNestedInput
  lesson?: Prisma.LessonUpdateOneRequiredWithoutProgressNestedInput
}

export type UserLessonProgressUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  completed?: Prisma.BoolFieldUpdateOperationsInput | boolean
  lastAccessed?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  lessonId?: Prisma.IntFieldUpdateOperationsInput | number
}

export type UserLessonProgressCreateManyInput = {
  id?: string
  completed?: boolean
  lastAccessed?: Date | string
  userId: string
  lessonId: number
}

export type UserLessonProgressUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  completed?: Prisma.BoolFieldUpdateOperationsInput | boolean
  lastAccessed?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UserLessonProgressUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  completed?: Prisma.BoolFieldUpdateOperationsInput | boolean
  lastAccessed?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  lessonId?: Prisma.IntFieldUpdateOperationsInput | number
}

export type UserLessonProgressListRelationFilter = {
  every?: Prisma.UserLessonProgressWhereInput
  some?: Prisma.UserLessonProgressWhereInput
  none?: Prisma.UserLessonProgressWhereInput
}

export type UserLessonProgressOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type UserLessonProgressUserIdLessonIdCompoundUniqueInput = {
  userId: string
  lessonId: number
}

export type UserLessonProgressCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  completed?: Prisma.SortOrder
  lastAccessed?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  lessonId?: Prisma.SortOrder
}

export type UserLessonProgressAvgOrderByAggregateInput = {
  lessonId?: Prisma.SortOrder
}

export type UserLessonProgressMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  completed?: Prisma.SortOrder
  lastAccessed?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  lessonId?: Prisma.SortOrder
}

export type UserLessonProgressMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  completed?: Prisma.SortOrder
  lastAccessed?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  lessonId?: Prisma.SortOrder
}

export type UserLessonProgressSumOrderByAggregateInput = {
  lessonId?: Prisma.SortOrder
}

export type UserLessonProgressCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.UserLessonProgressCreateWithoutUserInput, Prisma.UserLessonProgressUncheckedCreateWithoutUserInput> | Prisma.UserLessonProgressCreateWithoutUserInput[] | Prisma.UserLessonProgressUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.UserLessonProgressCreateOrConnectWithoutUserInput | Prisma.UserLessonProgressCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.UserLessonProgressCreateManyUserInputEnvelope
  connect?: Prisma.UserLessonProgressWhereUniqueInput | Prisma.UserLessonProgressWhereUniqueInput[]
}

export type UserLessonProgressUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.UserLessonProgressCreateWithoutUserInput, Prisma.UserLessonProgressUncheckedCreateWithoutUserInput> | Prisma.UserLessonProgressCreateWithoutUserInput[] | Prisma.UserLessonProgressUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.UserLessonProgressCreateOrConnectWithoutUserInput | Prisma.UserLessonProgressCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.UserLessonProgressCreateManyUserInputEnvelope
  connect?: Prisma.UserLessonProgressWhereUniqueInput | Prisma.UserLessonProgressWhereUniqueInput[]
}

export type UserLessonProgressUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.UserLessonProgressCreateWithoutUserInput, Prisma.UserLessonProgressUncheckedCreateWithoutUserInput> | Prisma.UserLessonProgressCreateWithoutUserInput[] | Prisma.UserLessonProgressUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.UserLessonProgressCreateOrConnectWithoutUserInput | Prisma.UserLessonProgressCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.UserLessonProgressUpsertWithWhereUniqueWithoutUserInput | Prisma.UserLessonProgressUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.UserLessonProgressCreateManyUserInputEnvelope
  set?: Prisma.UserLessonProgressWhereUniqueInput | Prisma.UserLessonProgressWhereUniqueInput[]
  disconnect?: Prisma.UserLessonProgressWhereUniqueInput | Prisma.UserLessonProgressWhereUniqueInput[]
  delete?: Prisma.UserLessonProgressWhereUniqueInput | Prisma.UserLessonProgressWhereUniqueInput[]
  connect?: Prisma.UserLessonProgressWhereUniqueInput | Prisma.UserLessonProgressWhereUniqueInput[]
  update?: Prisma.UserLessonProgressUpdateWithWhereUniqueWithoutUserInput | Prisma.UserLessonProgressUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.UserLessonProgressUpdateManyWithWhereWithoutUserInput | Prisma.UserLessonProgressUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.UserLessonProgressScalarWhereInput | Prisma.UserLessonProgressScalarWhereInput[]
}

export type UserLessonProgressUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.UserLessonProgressCreateWithoutUserInput, Prisma.UserLessonProgressUncheckedCreateWithoutUserInput> | Prisma.UserLessonProgressCreateWithoutUserInput[] | Prisma.UserLessonProgressUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.UserLessonProgressCreateOrConnectWithoutUserInput | Prisma.UserLessonProgressCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.UserLessonProgressUpsertWithWhereUniqueWithoutUserInput | Prisma.UserLessonProgressUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.UserLessonProgressCreateManyUserInputEnvelope
  set?: Prisma.UserLessonProgressWhereUniqueInput | Prisma.UserLessonProgressWhereUniqueInput[]
  disconnect?: Prisma.UserLessonProgressWhereUniqueInput | Prisma.UserLessonProgressWhereUniqueInput[]
  delete?: Prisma.UserLessonProgressWhereUniqueInput | Prisma.UserLessonProgressWhereUniqueInput[]
  connect?: Prisma.UserLessonProgressWhereUniqueInput | Prisma.UserLessonProgressWhereUniqueInput[]
  update?: Prisma.UserLessonProgressUpdateWithWhereUniqueWithoutUserInput | Prisma.UserLessonProgressUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.UserLessonProgressUpdateManyWithWhereWithoutUserInput | Prisma.UserLessonProgressUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.UserLessonProgressScalarWhereInput | Prisma.UserLessonProgressScalarWhereInput[]
}

export type UserLessonProgressCreateNestedManyWithoutLessonInput = {
  create?: Prisma.XOR<Prisma.UserLessonProgressCreateWithoutLessonInput, Prisma.UserLessonProgressUncheckedCreateWithoutLessonInput> | Prisma.UserLessonProgressCreateWithoutLessonInput[] | Prisma.UserLessonProgressUncheckedCreateWithoutLessonInput[]
  connectOrCreate?: Prisma.UserLessonProgressCreateOrConnectWithoutLessonInput | Prisma.UserLessonProgressCreateOrConnectWithoutLessonInput[]
  createMany?: Prisma.UserLessonProgressCreateManyLessonInputEnvelope
  connect?: Prisma.UserLessonProgressWhereUniqueInput | Prisma.UserLessonProgressWhereUniqueInput[]
}

export type UserLessonProgressUncheckedCreateNestedManyWithoutLessonInput = {
  create?: Prisma.XOR<Prisma.UserLessonProgressCreateWithoutLessonInput, Prisma.UserLessonProgressUncheckedCreateWithoutLessonInput> | Prisma.UserLessonProgressCreateWithoutLessonInput[] | Prisma.UserLessonProgressUncheckedCreateWithoutLessonInput[]
  connectOrCreate?: Prisma.UserLessonProgressCreateOrConnectWithoutLessonInput | Prisma.UserLessonProgressCreateOrConnectWithoutLessonInput[]
  createMany?: Prisma.UserLessonProgressCreateManyLessonInputEnvelope
  connect?: Prisma.UserLessonProgressWhereUniqueInput | Prisma.UserLessonProgressWhereUniqueInput[]
}

export type UserLessonProgressUpdateManyWithoutLessonNestedInput = {
  create?: Prisma.XOR<Prisma.UserLessonProgressCreateWithoutLessonInput, Prisma.UserLessonProgressUncheckedCreateWithoutLessonInput> | Prisma.UserLessonProgressCreateWithoutLessonInput[] | Prisma.UserLessonProgressUncheckedCreateWithoutLessonInput[]
  connectOrCreate?: Prisma.UserLessonProgressCreateOrConnectWithoutLessonInput | Prisma.UserLessonProgressCreateOrConnectWithoutLessonInput[]
  upsert?: Prisma.UserLessonProgressUpsertWithWhereUniqueWithoutLessonInput | Prisma.UserLessonProgressUpsertWithWhereUniqueWithoutLessonInput[]
  createMany?: Prisma.UserLessonProgressCreateManyLessonInputEnvelope
  set?: Prisma.UserLessonProgressWhereUniqueInput | Prisma.UserLessonProgressWhereUniqueInput[]
  disconnect?: Prisma.UserLessonProgressWhereUniqueInput | Prisma.UserLessonProgressWhereUniqueInput[]
  delete?: Prisma.UserLessonProgressWhereUniqueInput | Prisma.UserLessonProgressWhereUniqueInput[]
  connect?: Prisma.UserLessonProgressWhereUniqueInput | Prisma.UserLessonProgressWhereUniqueInput[]
  update?: Prisma.UserLessonProgressUpdateWithWhereUniqueWithoutLessonInput | Prisma.UserLessonProgressUpdateWithWhereUniqueWithoutLessonInput[]
  updateMany?: Prisma.UserLessonProgressUpdateManyWithWhereWithoutLessonInput | Prisma.UserLessonProgressUpdateManyWithWhereWithoutLessonInput[]
  deleteMany?: Prisma.UserLessonProgressScalarWhereInput | Prisma.UserLessonProgressScalarWhereInput[]
}

export type UserLessonProgressUncheckedUpdateManyWithoutLessonNestedInput = {
  create?: Prisma.XOR<Prisma.UserLessonProgressCreateWithoutLessonInput, Prisma.UserLessonProgressUncheckedCreateWithoutLessonInput> | Prisma.UserLessonProgressCreateWithoutLessonInput[] | Prisma.UserLessonProgressUncheckedCreateWithoutLessonInput[]
  connectOrCreate?: Prisma.UserLessonProgressCreateOrConnectWithoutLessonInput | Prisma.UserLessonProgressCreateOrConnectWithoutLessonInput[]
  upsert?: Prisma.UserLessonProgressUpsertWithWhereUniqueWithoutLessonInput | Prisma.UserLessonProgressUpsertWithWhereUniqueWithoutLessonInput[]
  createMany?: Prisma.UserLessonProgressCreateManyLessonInputEnvelope
  set?: Prisma.UserLessonProgressWhereUniqueInput | Prisma.UserLessonProgressWhereUniqueInput[]
  disconnect?: Prisma.UserLessonProgressWhereUniqueInput | Prisma.UserLessonProgressWhereUniqueInput[]
  delete?: Prisma.UserLessonProgressWhereUniqueInput | Prisma.UserLessonProgressWhereUniqueInput[]
  connect?: Prisma.UserLessonProgressWhereUniqueInput | Prisma.UserLessonProgressWhereUniqueInput[]
  update?: Prisma.UserLessonProgressUpdateWithWhereUniqueWithoutLessonInput | Prisma.UserLessonProgressUpdateWithWhereUniqueWithoutLessonInput[]
  updateMany?: Prisma.UserLessonProgressUpdateManyWithWhereWithoutLessonInput | Prisma.UserLessonProgressUpdateManyWithWhereWithoutLessonInput[]
  deleteMany?: Prisma.UserLessonProgressScalarWhereInput | Prisma.UserLessonProgressScalarWhereInput[]
}

export type UserLessonProgressCreateWithoutUserInput = {
  id?: string
  completed?: boolean
  lastAccessed?: Date | string
  lesson: Prisma.LessonCreateNestedOneWithoutProgressInput
}

export type UserLessonProgressUncheckedCreateWithoutUserInput = {
  id?: string
  completed?: boolean
  lastAccessed?: Date | string
  lessonId: number
}

export type UserLessonProgressCreateOrConnectWithoutUserInput = {
  where: Prisma.UserLessonProgressWhereUniqueInput
  create: Prisma.XOR<Prisma.UserLessonProgressCreateWithoutUserInput, Prisma.UserLessonProgressUncheckedCreateWithoutUserInput>
}

export type UserLessonProgressCreateManyUserInputEnvelope = {
  data: Prisma.UserLessonProgressCreateManyUserInput | Prisma.UserLessonProgressCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type UserLessonProgressUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.UserLessonProgressWhereUniqueInput
  update: Prisma.XOR<Prisma.UserLessonProgressUpdateWithoutUserInput, Prisma.UserLessonProgressUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.UserLessonProgressCreateWithoutUserInput, Prisma.UserLessonProgressUncheckedCreateWithoutUserInput>
}

export type UserLessonProgressUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.UserLessonProgressWhereUniqueInput
  data: Prisma.XOR<Prisma.UserLessonProgressUpdateWithoutUserInput, Prisma.UserLessonProgressUncheckedUpdateWithoutUserInput>
}

export type UserLessonProgressUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.UserLessonProgressScalarWhereInput
  data: Prisma.XOR<Prisma.UserLessonProgressUpdateManyMutationInput, Prisma.UserLessonProgressUncheckedUpdateManyWithoutUserInput>
}

export type UserLessonProgressScalarWhereInput = {
  AND?: Prisma.UserLessonProgressScalarWhereInput | Prisma.UserLessonProgressScalarWhereInput[]
  OR?: Prisma.UserLessonProgressScalarWhereInput[]
  NOT?: Prisma.UserLessonProgressScalarWhereInput | Prisma.UserLessonProgressScalarWhereInput[]
  id?: Prisma.StringFilter<"UserLessonProgress"> | string
  completed?: Prisma.BoolFilter<"UserLessonProgress"> | boolean
  lastAccessed?: Prisma.DateTimeFilter<"UserLessonProgress"> | Date | string
  userId?: Prisma.StringFilter<"UserLessonProgress"> | string
  lessonId?: Prisma.IntFilter<"UserLessonProgress"> | number
}

export type UserLessonProgressCreateWithoutLessonInput = {
  id?: string
  completed?: boolean
  lastAccessed?: Date | string
  user: Prisma.UserCreateNestedOneWithoutLessonProgressInput
}

export type UserLessonProgressUncheckedCreateWithoutLessonInput = {
  id?: string
  completed?: boolean
  lastAccessed?: Date | string
  userId: string
}

export type UserLessonProgressCreateOrConnectWithoutLessonInput = {
  where: Prisma.UserLessonProgressWhereUniqueInput
  create: Prisma.XOR<Prisma.UserLessonProgressCreateWithoutLessonInput, Prisma.UserLessonProgressUncheckedCreateWithoutLessonInput>
}

export type UserLessonProgressCreateManyLessonInputEnvelope = {
  data: Prisma.UserLessonProgressCreateManyLessonInput | Prisma.UserLessonProgressCreateManyLessonInput[]
  skipDuplicates?: boolean
}

export type UserLessonProgressUpsertWithWhereUniqueWithoutLessonInput = {
  where: Prisma.UserLessonProgressWhereUniqueInput
  update: Prisma.XOR<Prisma.UserLessonProgressUpdateWithoutLessonInput, Prisma.UserLessonProgressUncheckedUpdateWithoutLessonInput>
  create: Prisma.XOR<Prisma.UserLessonProgressCreateWithoutLessonInput, Prisma.UserLessonProgressUncheckedCreateWithoutLessonInput>
}

export type UserLessonProgressUpdateWithWhereUniqueWithoutLessonInput = {
  where: Prisma.UserLessonProgressWhereUniqueInput
  data: Prisma.XOR<Prisma.UserLessonProgressUpdateWithoutLessonInput, Prisma.UserLessonProgressUncheckedUpdateWithoutLessonInput>
}

export type UserLessonProgressUpdateManyWithWhereWithoutLessonInput = {
  where: Prisma.UserLessonProgressScalarWhereInput
  data: Prisma.XOR<Prisma.UserLessonProgressUpdateManyMutationInput, Prisma.UserLessonProgressUncheckedUpdateManyWithoutLessonInput>
}

export type UserLessonProgressCreateManyUserInput = {
  id?: string
  completed?: boolean
  lastAccessed?: Date | string
  lessonId: number
}

export type UserLessonProgressUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  completed?: Prisma.BoolFieldUpdateOperationsInput | boolean
  lastAccessed?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  lesson?: Prisma.LessonUpdateOneRequiredWithoutProgressNestedInput
}

export type UserLessonProgressUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  completed?: Prisma.BoolFieldUpdateOperationsInput | boolean
  lastAccessed?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  lessonId?: Prisma.IntFieldUpdateOperationsInput | number
}

export type UserLessonProgressUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  completed?: Prisma.BoolFieldUpdateOperationsInput | boolean
  lastAccessed?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  lessonId?: Prisma.IntFieldUpdateOperationsInput | number
}

export type UserLessonProgressCreateManyLessonInput = {
  id?: string
  completed?: boolean
  lastAccessed?: Date | string
  userId: string
}

export type UserLessonProgressUpdateWithoutLessonInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  completed?: Prisma.BoolFieldUpdateOperationsInput | boolean
  lastAccessed?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutLessonProgressNestedInput
}

export type UserLessonProgressUncheckedUpdateWithoutLessonInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  completed?: Prisma.BoolFieldUpdateOperationsInput | boolean
  lastAccessed?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type UserLessonProgressUncheckedUpdateManyWithoutLessonInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  completed?: Prisma.BoolFieldUpdateOperationsInput | boolean
  lastAccessed?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
}



export type UserLessonProgressSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  completed?: boolean
  lastAccessed?: boolean
  userId?: boolean
  lessonId?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  lesson?: boolean | Prisma.LessonDefaultArgs<ExtArgs>
}, ExtArgs["result"]["userLessonProgress"]>

export type UserLessonProgressSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  completed?: boolean
  lastAccessed?: boolean
  userId?: boolean
  lessonId?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  lesson?: boolean | Prisma.LessonDefaultArgs<ExtArgs>
}, ExtArgs["result"]["userLessonProgress"]>

export type UserLessonProgressSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  completed?: boolean
  lastAccessed?: boolean
  userId?: boolean
  lessonId?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  lesson?: boolean | Prisma.LessonDefaultArgs<ExtArgs>
}, ExtArgs["result"]["userLessonProgress"]>

export type UserLessonProgressSelectScalar = {
  id?: boolean
  completed?: boolean
  lastAccessed?: boolean
  userId?: boolean
  lessonId?: boolean
}

export type UserLessonProgressOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "completed" | "lastAccessed" | "userId" | "lessonId", ExtArgs["result"]["userLessonProgress"]>
export type UserLessonProgressInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  lesson?: boolean | Prisma.LessonDefaultArgs<ExtArgs>
}
export type UserLessonProgressIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  lesson?: boolean | Prisma.LessonDefaultArgs<ExtArgs>
}
export type UserLessonProgressIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  lesson?: boolean | Prisma.LessonDefaultArgs<ExtArgs>
}

export type $UserLessonProgressPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "UserLessonProgress"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
    lesson: Prisma.$LessonPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    completed: boolean
    lastAccessed: Date
    userId: string
    lessonId: number
  }, ExtArgs["result"]["userLessonProgress"]>
  composites: {}
}

export type UserLessonProgressGetPayload<S extends boolean | null | undefined | UserLessonProgressDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$UserLessonProgressPayload, S>

export type UserLessonProgressCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<UserLessonProgressFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: UserLessonProgressCountAggregateInputType | true
  }

export interface UserLessonProgressDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserLessonProgress'], meta: { name: 'UserLessonProgress' } }
  /**
   * Find zero or one UserLessonProgress that matches the filter.
   * @param {UserLessonProgressFindUniqueArgs} args - Arguments to find a UserLessonProgress
   * @example
   * // Get one UserLessonProgress
   * const userLessonProgress = await prisma.userLessonProgress.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends UserLessonProgressFindUniqueArgs>(args: Prisma.SelectSubset<T, UserLessonProgressFindUniqueArgs<ExtArgs>>): Prisma.Prisma__UserLessonProgressClient<runtime.Types.Result.GetResult<Prisma.$UserLessonProgressPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one UserLessonProgress that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {UserLessonProgressFindUniqueOrThrowArgs} args - Arguments to find a UserLessonProgress
   * @example
   * // Get one UserLessonProgress
   * const userLessonProgress = await prisma.userLessonProgress.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends UserLessonProgressFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, UserLessonProgressFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__UserLessonProgressClient<runtime.Types.Result.GetResult<Prisma.$UserLessonProgressPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first UserLessonProgress that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserLessonProgressFindFirstArgs} args - Arguments to find a UserLessonProgress
   * @example
   * // Get one UserLessonProgress
   * const userLessonProgress = await prisma.userLessonProgress.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends UserLessonProgressFindFirstArgs>(args?: Prisma.SelectSubset<T, UserLessonProgressFindFirstArgs<ExtArgs>>): Prisma.Prisma__UserLessonProgressClient<runtime.Types.Result.GetResult<Prisma.$UserLessonProgressPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first UserLessonProgress that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserLessonProgressFindFirstOrThrowArgs} args - Arguments to find a UserLessonProgress
   * @example
   * // Get one UserLessonProgress
   * const userLessonProgress = await prisma.userLessonProgress.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends UserLessonProgressFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, UserLessonProgressFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__UserLessonProgressClient<runtime.Types.Result.GetResult<Prisma.$UserLessonProgressPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more UserLessonProgresses that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserLessonProgressFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all UserLessonProgresses
   * const userLessonProgresses = await prisma.userLessonProgress.findMany()
   * 
   * // Get first 10 UserLessonProgresses
   * const userLessonProgresses = await prisma.userLessonProgress.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const userLessonProgressWithIdOnly = await prisma.userLessonProgress.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends UserLessonProgressFindManyArgs>(args?: Prisma.SelectSubset<T, UserLessonProgressFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserLessonProgressPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a UserLessonProgress.
   * @param {UserLessonProgressCreateArgs} args - Arguments to create a UserLessonProgress.
   * @example
   * // Create one UserLessonProgress
   * const UserLessonProgress = await prisma.userLessonProgress.create({
   *   data: {
   *     // ... data to create a UserLessonProgress
   *   }
   * })
   * 
   */
  create<T extends UserLessonProgressCreateArgs>(args: Prisma.SelectSubset<T, UserLessonProgressCreateArgs<ExtArgs>>): Prisma.Prisma__UserLessonProgressClient<runtime.Types.Result.GetResult<Prisma.$UserLessonProgressPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many UserLessonProgresses.
   * @param {UserLessonProgressCreateManyArgs} args - Arguments to create many UserLessonProgresses.
   * @example
   * // Create many UserLessonProgresses
   * const userLessonProgress = await prisma.userLessonProgress.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends UserLessonProgressCreateManyArgs>(args?: Prisma.SelectSubset<T, UserLessonProgressCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many UserLessonProgresses and returns the data saved in the database.
   * @param {UserLessonProgressCreateManyAndReturnArgs} args - Arguments to create many UserLessonProgresses.
   * @example
   * // Create many UserLessonProgresses
   * const userLessonProgress = await prisma.userLessonProgress.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many UserLessonProgresses and only return the `id`
   * const userLessonProgressWithIdOnly = await prisma.userLessonProgress.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends UserLessonProgressCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, UserLessonProgressCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserLessonProgressPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a UserLessonProgress.
   * @param {UserLessonProgressDeleteArgs} args - Arguments to delete one UserLessonProgress.
   * @example
   * // Delete one UserLessonProgress
   * const UserLessonProgress = await prisma.userLessonProgress.delete({
   *   where: {
   *     // ... filter to delete one UserLessonProgress
   *   }
   * })
   * 
   */
  delete<T extends UserLessonProgressDeleteArgs>(args: Prisma.SelectSubset<T, UserLessonProgressDeleteArgs<ExtArgs>>): Prisma.Prisma__UserLessonProgressClient<runtime.Types.Result.GetResult<Prisma.$UserLessonProgressPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one UserLessonProgress.
   * @param {UserLessonProgressUpdateArgs} args - Arguments to update one UserLessonProgress.
   * @example
   * // Update one UserLessonProgress
   * const userLessonProgress = await prisma.userLessonProgress.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends UserLessonProgressUpdateArgs>(args: Prisma.SelectSubset<T, UserLessonProgressUpdateArgs<ExtArgs>>): Prisma.Prisma__UserLessonProgressClient<runtime.Types.Result.GetResult<Prisma.$UserLessonProgressPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more UserLessonProgresses.
   * @param {UserLessonProgressDeleteManyArgs} args - Arguments to filter UserLessonProgresses to delete.
   * @example
   * // Delete a few UserLessonProgresses
   * const { count } = await prisma.userLessonProgress.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends UserLessonProgressDeleteManyArgs>(args?: Prisma.SelectSubset<T, UserLessonProgressDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more UserLessonProgresses.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserLessonProgressUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many UserLessonProgresses
   * const userLessonProgress = await prisma.userLessonProgress.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends UserLessonProgressUpdateManyArgs>(args: Prisma.SelectSubset<T, UserLessonProgressUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more UserLessonProgresses and returns the data updated in the database.
   * @param {UserLessonProgressUpdateManyAndReturnArgs} args - Arguments to update many UserLessonProgresses.
   * @example
   * // Update many UserLessonProgresses
   * const userLessonProgress = await prisma.userLessonProgress.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more UserLessonProgresses and only return the `id`
   * const userLessonProgressWithIdOnly = await prisma.userLessonProgress.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends UserLessonProgressUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, UserLessonProgressUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserLessonProgressPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one UserLessonProgress.
   * @param {UserLessonProgressUpsertArgs} args - Arguments to update or create a UserLessonProgress.
   * @example
   * // Update or create a UserLessonProgress
   * const userLessonProgress = await prisma.userLessonProgress.upsert({
   *   create: {
   *     // ... data to create a UserLessonProgress
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the UserLessonProgress we want to update
   *   }
   * })
   */
  upsert<T extends UserLessonProgressUpsertArgs>(args: Prisma.SelectSubset<T, UserLessonProgressUpsertArgs<ExtArgs>>): Prisma.Prisma__UserLessonProgressClient<runtime.Types.Result.GetResult<Prisma.$UserLessonProgressPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of UserLessonProgresses.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserLessonProgressCountArgs} args - Arguments to filter UserLessonProgresses to count.
   * @example
   * // Count the number of UserLessonProgresses
   * const count = await prisma.userLessonProgress.count({
   *   where: {
   *     // ... the filter for the UserLessonProgresses we want to count
   *   }
   * })
  **/
  count<T extends UserLessonProgressCountArgs>(
    args?: Prisma.Subset<T, UserLessonProgressCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], UserLessonProgressCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a UserLessonProgress.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserLessonProgressAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends UserLessonProgressAggregateArgs>(args: Prisma.Subset<T, UserLessonProgressAggregateArgs>): Prisma.PrismaPromise<GetUserLessonProgressAggregateType<T>>

  /**
   * Group by UserLessonProgress.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserLessonProgressGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends UserLessonProgressGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: UserLessonProgressGroupByArgs['orderBy'] }
      : { orderBy?: UserLessonProgressGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, UserLessonProgressGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserLessonProgressGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the UserLessonProgress model
 */
readonly fields: UserLessonProgressFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for UserLessonProgress.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__UserLessonProgressClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  lesson<T extends Prisma.LessonDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.LessonDefaultArgs<ExtArgs>>): Prisma.Prisma__LessonClient<runtime.Types.Result.GetResult<Prisma.$LessonPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the UserLessonProgress model
 */
export interface UserLessonProgressFieldRefs {
  readonly id: Prisma.FieldRef<"UserLessonProgress", 'String'>
  readonly completed: Prisma.FieldRef<"UserLessonProgress", 'Boolean'>
  readonly lastAccessed: Prisma.FieldRef<"UserLessonProgress", 'DateTime'>
  readonly userId: Prisma.FieldRef<"UserLessonProgress", 'String'>
  readonly lessonId: Prisma.FieldRef<"UserLessonProgress", 'Int'>
}
    

// Custom InputTypes
/**
 * UserLessonProgress findUnique
 */
export type UserLessonProgressFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserLessonProgress
   */
  select?: Prisma.UserLessonProgressSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserLessonProgress
   */
  omit?: Prisma.UserLessonProgressOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserLessonProgressInclude<ExtArgs> | null
  /**
   * Filter, which UserLessonProgress to fetch.
   */
  where: Prisma.UserLessonProgressWhereUniqueInput
}

/**
 * UserLessonProgress findUniqueOrThrow
 */
export type UserLessonProgressFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserLessonProgress
   */
  select?: Prisma.UserLessonProgressSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserLessonProgress
   */
  omit?: Prisma.UserLessonProgressOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserLessonProgressInclude<ExtArgs> | null
  /**
   * Filter, which UserLessonProgress to fetch.
   */
  where: Prisma.UserLessonProgressWhereUniqueInput
}

/**
 * UserLessonProgress findFirst
 */
export type UserLessonProgressFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserLessonProgress
   */
  select?: Prisma.UserLessonProgressSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserLessonProgress
   */
  omit?: Prisma.UserLessonProgressOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserLessonProgressInclude<ExtArgs> | null
  /**
   * Filter, which UserLessonProgress to fetch.
   */
  where?: Prisma.UserLessonProgressWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserLessonProgresses to fetch.
   */
  orderBy?: Prisma.UserLessonProgressOrderByWithRelationInput | Prisma.UserLessonProgressOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for UserLessonProgresses.
   */
  cursor?: Prisma.UserLessonProgressWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserLessonProgresses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserLessonProgresses.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of UserLessonProgresses.
   */
  distinct?: Prisma.UserLessonProgressScalarFieldEnum | Prisma.UserLessonProgressScalarFieldEnum[]
}

/**
 * UserLessonProgress findFirstOrThrow
 */
export type UserLessonProgressFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserLessonProgress
   */
  select?: Prisma.UserLessonProgressSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserLessonProgress
   */
  omit?: Prisma.UserLessonProgressOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserLessonProgressInclude<ExtArgs> | null
  /**
   * Filter, which UserLessonProgress to fetch.
   */
  where?: Prisma.UserLessonProgressWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserLessonProgresses to fetch.
   */
  orderBy?: Prisma.UserLessonProgressOrderByWithRelationInput | Prisma.UserLessonProgressOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for UserLessonProgresses.
   */
  cursor?: Prisma.UserLessonProgressWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserLessonProgresses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserLessonProgresses.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of UserLessonProgresses.
   */
  distinct?: Prisma.UserLessonProgressScalarFieldEnum | Prisma.UserLessonProgressScalarFieldEnum[]
}

/**
 * UserLessonProgress findMany
 */
export type UserLessonProgressFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserLessonProgress
   */
  select?: Prisma.UserLessonProgressSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserLessonProgress
   */
  omit?: Prisma.UserLessonProgressOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserLessonProgressInclude<ExtArgs> | null
  /**
   * Filter, which UserLessonProgresses to fetch.
   */
  where?: Prisma.UserLessonProgressWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserLessonProgresses to fetch.
   */
  orderBy?: Prisma.UserLessonProgressOrderByWithRelationInput | Prisma.UserLessonProgressOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing UserLessonProgresses.
   */
  cursor?: Prisma.UserLessonProgressWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserLessonProgresses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserLessonProgresses.
   */
  skip?: number
  distinct?: Prisma.UserLessonProgressScalarFieldEnum | Prisma.UserLessonProgressScalarFieldEnum[]
}

/**
 * UserLessonProgress create
 */
export type UserLessonProgressCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserLessonProgress
   */
  select?: Prisma.UserLessonProgressSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserLessonProgress
   */
  omit?: Prisma.UserLessonProgressOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserLessonProgressInclude<ExtArgs> | null
  /**
   * The data needed to create a UserLessonProgress.
   */
  data: Prisma.XOR<Prisma.UserLessonProgressCreateInput, Prisma.UserLessonProgressUncheckedCreateInput>
}

/**
 * UserLessonProgress createMany
 */
export type UserLessonProgressCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many UserLessonProgresses.
   */
  data: Prisma.UserLessonProgressCreateManyInput | Prisma.UserLessonProgressCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * UserLessonProgress createManyAndReturn
 */
export type UserLessonProgressCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserLessonProgress
   */
  select?: Prisma.UserLessonProgressSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the UserLessonProgress
   */
  omit?: Prisma.UserLessonProgressOmit<ExtArgs> | null
  /**
   * The data used to create many UserLessonProgresses.
   */
  data: Prisma.UserLessonProgressCreateManyInput | Prisma.UserLessonProgressCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserLessonProgressIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * UserLessonProgress update
 */
export type UserLessonProgressUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserLessonProgress
   */
  select?: Prisma.UserLessonProgressSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserLessonProgress
   */
  omit?: Prisma.UserLessonProgressOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserLessonProgressInclude<ExtArgs> | null
  /**
   * The data needed to update a UserLessonProgress.
   */
  data: Prisma.XOR<Prisma.UserLessonProgressUpdateInput, Prisma.UserLessonProgressUncheckedUpdateInput>
  /**
   * Choose, which UserLessonProgress to update.
   */
  where: Prisma.UserLessonProgressWhereUniqueInput
}

/**
 * UserLessonProgress updateMany
 */
export type UserLessonProgressUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update UserLessonProgresses.
   */
  data: Prisma.XOR<Prisma.UserLessonProgressUpdateManyMutationInput, Prisma.UserLessonProgressUncheckedUpdateManyInput>
  /**
   * Filter which UserLessonProgresses to update
   */
  where?: Prisma.UserLessonProgressWhereInput
  /**
   * Limit how many UserLessonProgresses to update.
   */
  limit?: number
}

/**
 * UserLessonProgress updateManyAndReturn
 */
export type UserLessonProgressUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserLessonProgress
   */
  select?: Prisma.UserLessonProgressSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the UserLessonProgress
   */
  omit?: Prisma.UserLessonProgressOmit<ExtArgs> | null
  /**
   * The data used to update UserLessonProgresses.
   */
  data: Prisma.XOR<Prisma.UserLessonProgressUpdateManyMutationInput, Prisma.UserLessonProgressUncheckedUpdateManyInput>
  /**
   * Filter which UserLessonProgresses to update
   */
  where?: Prisma.UserLessonProgressWhereInput
  /**
   * Limit how many UserLessonProgresses to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserLessonProgressIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * UserLessonProgress upsert
 */
export type UserLessonProgressUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserLessonProgress
   */
  select?: Prisma.UserLessonProgressSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserLessonProgress
   */
  omit?: Prisma.UserLessonProgressOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserLessonProgressInclude<ExtArgs> | null
  /**
   * The filter to search for the UserLessonProgress to update in case it exists.
   */
  where: Prisma.UserLessonProgressWhereUniqueInput
  /**
   * In case the UserLessonProgress found by the `where` argument doesn't exist, create a new UserLessonProgress with this data.
   */
  create: Prisma.XOR<Prisma.UserLessonProgressCreateInput, Prisma.UserLessonProgressUncheckedCreateInput>
  /**
   * In case the UserLessonProgress was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.UserLessonProgressUpdateInput, Prisma.UserLessonProgressUncheckedUpdateInput>
}

/**
 * UserLessonProgress delete
 */
export type UserLessonProgressDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserLessonProgress
   */
  select?: Prisma.UserLessonProgressSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserLessonProgress
   */
  omit?: Prisma.UserLessonProgressOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserLessonProgressInclude<ExtArgs> | null
  /**
   * Filter which UserLessonProgress to delete.
   */
  where: Prisma.UserLessonProgressWhereUniqueInput
}

/**
 * UserLessonProgress deleteMany
 */
export type UserLessonProgressDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which UserLessonProgresses to delete
   */
  where?: Prisma.UserLessonProgressWhereInput
  /**
   * Limit how many UserLessonProgresses to delete.
   */
  limit?: number
}

/**
 * UserLessonProgress without action
 */
export type UserLessonProgressDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserLessonProgress
   */
  select?: Prisma.UserLessonProgressSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserLessonProgress
   */
  omit?: Prisma.UserLessonProgressOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserLessonProgressInclude<ExtArgs> | null
}
