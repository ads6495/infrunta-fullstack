
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `ExerciseAttempt` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model ExerciseAttempt
 * 
 */
export type ExerciseAttemptModel = runtime.Types.Result.DefaultSelection<Prisma.$ExerciseAttemptPayload>

export type AggregateExerciseAttempt = {
  _count: ExerciseAttemptCountAggregateOutputType | null
  _avg: ExerciseAttemptAvgAggregateOutputType | null
  _sum: ExerciseAttemptSumAggregateOutputType | null
  _min: ExerciseAttemptMinAggregateOutputType | null
  _max: ExerciseAttemptMaxAggregateOutputType | null
}

export type ExerciseAttemptAvgAggregateOutputType = {
  exerciseId: number | null
}

export type ExerciseAttemptSumAggregateOutputType = {
  exerciseId: number | null
}

export type ExerciseAttemptMinAggregateOutputType = {
  id: string | null
  exerciseId: number | null
  userId: string | null
  answer: string | null
  correct: boolean | null
  timestamp: Date | null
}

export type ExerciseAttemptMaxAggregateOutputType = {
  id: string | null
  exerciseId: number | null
  userId: string | null
  answer: string | null
  correct: boolean | null
  timestamp: Date | null
}

export type ExerciseAttemptCountAggregateOutputType = {
  id: number
  exerciseId: number
  userId: number
  answer: number
  correct: number
  timestamp: number
  _all: number
}


export type ExerciseAttemptAvgAggregateInputType = {
  exerciseId?: true
}

export type ExerciseAttemptSumAggregateInputType = {
  exerciseId?: true
}

export type ExerciseAttemptMinAggregateInputType = {
  id?: true
  exerciseId?: true
  userId?: true
  answer?: true
  correct?: true
  timestamp?: true
}

export type ExerciseAttemptMaxAggregateInputType = {
  id?: true
  exerciseId?: true
  userId?: true
  answer?: true
  correct?: true
  timestamp?: true
}

export type ExerciseAttemptCountAggregateInputType = {
  id?: true
  exerciseId?: true
  userId?: true
  answer?: true
  correct?: true
  timestamp?: true
  _all?: true
}

export type ExerciseAttemptAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ExerciseAttempt to aggregate.
   */
  where?: Prisma.ExerciseAttemptWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ExerciseAttempts to fetch.
   */
  orderBy?: Prisma.ExerciseAttemptOrderByWithRelationInput | Prisma.ExerciseAttemptOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ExerciseAttemptWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ExerciseAttempts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ExerciseAttempts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ExerciseAttempts
  **/
  _count?: true | ExerciseAttemptCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ExerciseAttemptAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ExerciseAttemptSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ExerciseAttemptMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ExerciseAttemptMaxAggregateInputType
}

export type GetExerciseAttemptAggregateType<T extends ExerciseAttemptAggregateArgs> = {
      [P in keyof T & keyof AggregateExerciseAttempt]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateExerciseAttempt[P]>
    : Prisma.GetScalarType<T[P], AggregateExerciseAttempt[P]>
}




export type ExerciseAttemptGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ExerciseAttemptWhereInput
  orderBy?: Prisma.ExerciseAttemptOrderByWithAggregationInput | Prisma.ExerciseAttemptOrderByWithAggregationInput[]
  by: Prisma.ExerciseAttemptScalarFieldEnum[] | Prisma.ExerciseAttemptScalarFieldEnum
  having?: Prisma.ExerciseAttemptScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ExerciseAttemptCountAggregateInputType | true
  _avg?: ExerciseAttemptAvgAggregateInputType
  _sum?: ExerciseAttemptSumAggregateInputType
  _min?: ExerciseAttemptMinAggregateInputType
  _max?: ExerciseAttemptMaxAggregateInputType
}

export type ExerciseAttemptGroupByOutputType = {
  id: string
  exerciseId: number
  userId: string
  answer: string
  correct: boolean
  timestamp: Date
  _count: ExerciseAttemptCountAggregateOutputType | null
  _avg: ExerciseAttemptAvgAggregateOutputType | null
  _sum: ExerciseAttemptSumAggregateOutputType | null
  _min: ExerciseAttemptMinAggregateOutputType | null
  _max: ExerciseAttemptMaxAggregateOutputType | null
}

type GetExerciseAttemptGroupByPayload<T extends ExerciseAttemptGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ExerciseAttemptGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ExerciseAttemptGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ExerciseAttemptGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ExerciseAttemptGroupByOutputType[P]>
      }
    >
  > 



export type ExerciseAttemptWhereInput = {
  AND?: Prisma.ExerciseAttemptWhereInput | Prisma.ExerciseAttemptWhereInput[]
  OR?: Prisma.ExerciseAttemptWhereInput[]
  NOT?: Prisma.ExerciseAttemptWhereInput | Prisma.ExerciseAttemptWhereInput[]
  id?: Prisma.StringFilter<"ExerciseAttempt"> | string
  exerciseId?: Prisma.IntFilter<"ExerciseAttempt"> | number
  userId?: Prisma.StringFilter<"ExerciseAttempt"> | string
  answer?: Prisma.StringFilter<"ExerciseAttempt"> | string
  correct?: Prisma.BoolFilter<"ExerciseAttempt"> | boolean
  timestamp?: Prisma.DateTimeFilter<"ExerciseAttempt"> | Date | string
  exercise?: Prisma.XOR<Prisma.ExerciseScalarRelationFilter, Prisma.ExerciseWhereInput>
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type ExerciseAttemptOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  exerciseId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  answer?: Prisma.SortOrder
  correct?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
  exercise?: Prisma.ExerciseOrderByWithRelationInput
  user?: Prisma.UserOrderByWithRelationInput
}

export type ExerciseAttemptWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.ExerciseAttemptWhereInput | Prisma.ExerciseAttemptWhereInput[]
  OR?: Prisma.ExerciseAttemptWhereInput[]
  NOT?: Prisma.ExerciseAttemptWhereInput | Prisma.ExerciseAttemptWhereInput[]
  exerciseId?: Prisma.IntFilter<"ExerciseAttempt"> | number
  userId?: Prisma.StringFilter<"ExerciseAttempt"> | string
  answer?: Prisma.StringFilter<"ExerciseAttempt"> | string
  correct?: Prisma.BoolFilter<"ExerciseAttempt"> | boolean
  timestamp?: Prisma.DateTimeFilter<"ExerciseAttempt"> | Date | string
  exercise?: Prisma.XOR<Prisma.ExerciseScalarRelationFilter, Prisma.ExerciseWhereInput>
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id">

export type ExerciseAttemptOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  exerciseId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  answer?: Prisma.SortOrder
  correct?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
  _count?: Prisma.ExerciseAttemptCountOrderByAggregateInput
  _avg?: Prisma.ExerciseAttemptAvgOrderByAggregateInput
  _max?: Prisma.ExerciseAttemptMaxOrderByAggregateInput
  _min?: Prisma.ExerciseAttemptMinOrderByAggregateInput
  _sum?: Prisma.ExerciseAttemptSumOrderByAggregateInput
}

export type ExerciseAttemptScalarWhereWithAggregatesInput = {
  AND?: Prisma.ExerciseAttemptScalarWhereWithAggregatesInput | Prisma.ExerciseAttemptScalarWhereWithAggregatesInput[]
  OR?: Prisma.ExerciseAttemptScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ExerciseAttemptScalarWhereWithAggregatesInput | Prisma.ExerciseAttemptScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"ExerciseAttempt"> | string
  exerciseId?: Prisma.IntWithAggregatesFilter<"ExerciseAttempt"> | number
  userId?: Prisma.StringWithAggregatesFilter<"ExerciseAttempt"> | string
  answer?: Prisma.StringWithAggregatesFilter<"ExerciseAttempt"> | string
  correct?: Prisma.BoolWithAggregatesFilter<"ExerciseAttempt"> | boolean
  timestamp?: Prisma.DateTimeWithAggregatesFilter<"ExerciseAttempt"> | Date | string
}

export type ExerciseAttemptCreateInput = {
  id?: string
  answer: string
  correct: boolean
  timestamp?: Date | string
  exercise: Prisma.ExerciseCreateNestedOneWithoutAttemptsInput
  user: Prisma.UserCreateNestedOneWithoutExerciseAttemptsInput
}

export type ExerciseAttemptUncheckedCreateInput = {
  id?: string
  exerciseId: number
  userId: string
  answer: string
  correct: boolean
  timestamp?: Date | string
}

export type ExerciseAttemptUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  answer?: Prisma.StringFieldUpdateOperationsInput | string
  correct?: Prisma.BoolFieldUpdateOperationsInput | boolean
  timestamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  exercise?: Prisma.ExerciseUpdateOneRequiredWithoutAttemptsNestedInput
  user?: Prisma.UserUpdateOneRequiredWithoutExerciseAttemptsNestedInput
}

export type ExerciseAttemptUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  exerciseId?: Prisma.IntFieldUpdateOperationsInput | number
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  answer?: Prisma.StringFieldUpdateOperationsInput | string
  correct?: Prisma.BoolFieldUpdateOperationsInput | boolean
  timestamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ExerciseAttemptCreateManyInput = {
  id?: string
  exerciseId: number
  userId: string
  answer: string
  correct: boolean
  timestamp?: Date | string
}

export type ExerciseAttemptUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  answer?: Prisma.StringFieldUpdateOperationsInput | string
  correct?: Prisma.BoolFieldUpdateOperationsInput | boolean
  timestamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ExerciseAttemptUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  exerciseId?: Prisma.IntFieldUpdateOperationsInput | number
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  answer?: Prisma.StringFieldUpdateOperationsInput | string
  correct?: Prisma.BoolFieldUpdateOperationsInput | boolean
  timestamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ExerciseAttemptListRelationFilter = {
  every?: Prisma.ExerciseAttemptWhereInput
  some?: Prisma.ExerciseAttemptWhereInput
  none?: Prisma.ExerciseAttemptWhereInput
}

export type ExerciseAttemptOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ExerciseAttemptCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  exerciseId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  answer?: Prisma.SortOrder
  correct?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
}

export type ExerciseAttemptAvgOrderByAggregateInput = {
  exerciseId?: Prisma.SortOrder
}

export type ExerciseAttemptMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  exerciseId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  answer?: Prisma.SortOrder
  correct?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
}

export type ExerciseAttemptMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  exerciseId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  answer?: Prisma.SortOrder
  correct?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
}

export type ExerciseAttemptSumOrderByAggregateInput = {
  exerciseId?: Prisma.SortOrder
}

export type ExerciseAttemptCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.ExerciseAttemptCreateWithoutUserInput, Prisma.ExerciseAttemptUncheckedCreateWithoutUserInput> | Prisma.ExerciseAttemptCreateWithoutUserInput[] | Prisma.ExerciseAttemptUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ExerciseAttemptCreateOrConnectWithoutUserInput | Prisma.ExerciseAttemptCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.ExerciseAttemptCreateManyUserInputEnvelope
  connect?: Prisma.ExerciseAttemptWhereUniqueInput | Prisma.ExerciseAttemptWhereUniqueInput[]
}

export type ExerciseAttemptUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.ExerciseAttemptCreateWithoutUserInput, Prisma.ExerciseAttemptUncheckedCreateWithoutUserInput> | Prisma.ExerciseAttemptCreateWithoutUserInput[] | Prisma.ExerciseAttemptUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ExerciseAttemptCreateOrConnectWithoutUserInput | Prisma.ExerciseAttemptCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.ExerciseAttemptCreateManyUserInputEnvelope
  connect?: Prisma.ExerciseAttemptWhereUniqueInput | Prisma.ExerciseAttemptWhereUniqueInput[]
}

export type ExerciseAttemptUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.ExerciseAttemptCreateWithoutUserInput, Prisma.ExerciseAttemptUncheckedCreateWithoutUserInput> | Prisma.ExerciseAttemptCreateWithoutUserInput[] | Prisma.ExerciseAttemptUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ExerciseAttemptCreateOrConnectWithoutUserInput | Prisma.ExerciseAttemptCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.ExerciseAttemptUpsertWithWhereUniqueWithoutUserInput | Prisma.ExerciseAttemptUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.ExerciseAttemptCreateManyUserInputEnvelope
  set?: Prisma.ExerciseAttemptWhereUniqueInput | Prisma.ExerciseAttemptWhereUniqueInput[]
  disconnect?: Prisma.ExerciseAttemptWhereUniqueInput | Prisma.ExerciseAttemptWhereUniqueInput[]
  delete?: Prisma.ExerciseAttemptWhereUniqueInput | Prisma.ExerciseAttemptWhereUniqueInput[]
  connect?: Prisma.ExerciseAttemptWhereUniqueInput | Prisma.ExerciseAttemptWhereUniqueInput[]
  update?: Prisma.ExerciseAttemptUpdateWithWhereUniqueWithoutUserInput | Prisma.ExerciseAttemptUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.ExerciseAttemptUpdateManyWithWhereWithoutUserInput | Prisma.ExerciseAttemptUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.ExerciseAttemptScalarWhereInput | Prisma.ExerciseAttemptScalarWhereInput[]
}

export type ExerciseAttemptUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.ExerciseAttemptCreateWithoutUserInput, Prisma.ExerciseAttemptUncheckedCreateWithoutUserInput> | Prisma.ExerciseAttemptCreateWithoutUserInput[] | Prisma.ExerciseAttemptUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ExerciseAttemptCreateOrConnectWithoutUserInput | Prisma.ExerciseAttemptCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.ExerciseAttemptUpsertWithWhereUniqueWithoutUserInput | Prisma.ExerciseAttemptUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.ExerciseAttemptCreateManyUserInputEnvelope
  set?: Prisma.ExerciseAttemptWhereUniqueInput | Prisma.ExerciseAttemptWhereUniqueInput[]
  disconnect?: Prisma.ExerciseAttemptWhereUniqueInput | Prisma.ExerciseAttemptWhereUniqueInput[]
  delete?: Prisma.ExerciseAttemptWhereUniqueInput | Prisma.ExerciseAttemptWhereUniqueInput[]
  connect?: Prisma.ExerciseAttemptWhereUniqueInput | Prisma.ExerciseAttemptWhereUniqueInput[]
  update?: Prisma.ExerciseAttemptUpdateWithWhereUniqueWithoutUserInput | Prisma.ExerciseAttemptUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.ExerciseAttemptUpdateManyWithWhereWithoutUserInput | Prisma.ExerciseAttemptUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.ExerciseAttemptScalarWhereInput | Prisma.ExerciseAttemptScalarWhereInput[]
}

export type ExerciseAttemptCreateNestedManyWithoutExerciseInput = {
  create?: Prisma.XOR<Prisma.ExerciseAttemptCreateWithoutExerciseInput, Prisma.ExerciseAttemptUncheckedCreateWithoutExerciseInput> | Prisma.ExerciseAttemptCreateWithoutExerciseInput[] | Prisma.ExerciseAttemptUncheckedCreateWithoutExerciseInput[]
  connectOrCreate?: Prisma.ExerciseAttemptCreateOrConnectWithoutExerciseInput | Prisma.ExerciseAttemptCreateOrConnectWithoutExerciseInput[]
  createMany?: Prisma.ExerciseAttemptCreateManyExerciseInputEnvelope
  connect?: Prisma.ExerciseAttemptWhereUniqueInput | Prisma.ExerciseAttemptWhereUniqueInput[]
}

export type ExerciseAttemptUncheckedCreateNestedManyWithoutExerciseInput = {
  create?: Prisma.XOR<Prisma.ExerciseAttemptCreateWithoutExerciseInput, Prisma.ExerciseAttemptUncheckedCreateWithoutExerciseInput> | Prisma.ExerciseAttemptCreateWithoutExerciseInput[] | Prisma.ExerciseAttemptUncheckedCreateWithoutExerciseInput[]
  connectOrCreate?: Prisma.ExerciseAttemptCreateOrConnectWithoutExerciseInput | Prisma.ExerciseAttemptCreateOrConnectWithoutExerciseInput[]
  createMany?: Prisma.ExerciseAttemptCreateManyExerciseInputEnvelope
  connect?: Prisma.ExerciseAttemptWhereUniqueInput | Prisma.ExerciseAttemptWhereUniqueInput[]
}

export type ExerciseAttemptUpdateManyWithoutExerciseNestedInput = {
  create?: Prisma.XOR<Prisma.ExerciseAttemptCreateWithoutExerciseInput, Prisma.ExerciseAttemptUncheckedCreateWithoutExerciseInput> | Prisma.ExerciseAttemptCreateWithoutExerciseInput[] | Prisma.ExerciseAttemptUncheckedCreateWithoutExerciseInput[]
  connectOrCreate?: Prisma.ExerciseAttemptCreateOrConnectWithoutExerciseInput | Prisma.ExerciseAttemptCreateOrConnectWithoutExerciseInput[]
  upsert?: Prisma.ExerciseAttemptUpsertWithWhereUniqueWithoutExerciseInput | Prisma.ExerciseAttemptUpsertWithWhereUniqueWithoutExerciseInput[]
  createMany?: Prisma.ExerciseAttemptCreateManyExerciseInputEnvelope
  set?: Prisma.ExerciseAttemptWhereUniqueInput | Prisma.ExerciseAttemptWhereUniqueInput[]
  disconnect?: Prisma.ExerciseAttemptWhereUniqueInput | Prisma.ExerciseAttemptWhereUniqueInput[]
  delete?: Prisma.ExerciseAttemptWhereUniqueInput | Prisma.ExerciseAttemptWhereUniqueInput[]
  connect?: Prisma.ExerciseAttemptWhereUniqueInput | Prisma.ExerciseAttemptWhereUniqueInput[]
  update?: Prisma.ExerciseAttemptUpdateWithWhereUniqueWithoutExerciseInput | Prisma.ExerciseAttemptUpdateWithWhereUniqueWithoutExerciseInput[]
  updateMany?: Prisma.ExerciseAttemptUpdateManyWithWhereWithoutExerciseInput | Prisma.ExerciseAttemptUpdateManyWithWhereWithoutExerciseInput[]
  deleteMany?: Prisma.ExerciseAttemptScalarWhereInput | Prisma.ExerciseAttemptScalarWhereInput[]
}

export type ExerciseAttemptUncheckedUpdateManyWithoutExerciseNestedInput = {
  create?: Prisma.XOR<Prisma.ExerciseAttemptCreateWithoutExerciseInput, Prisma.ExerciseAttemptUncheckedCreateWithoutExerciseInput> | Prisma.ExerciseAttemptCreateWithoutExerciseInput[] | Prisma.ExerciseAttemptUncheckedCreateWithoutExerciseInput[]
  connectOrCreate?: Prisma.ExerciseAttemptCreateOrConnectWithoutExerciseInput | Prisma.ExerciseAttemptCreateOrConnectWithoutExerciseInput[]
  upsert?: Prisma.ExerciseAttemptUpsertWithWhereUniqueWithoutExerciseInput | Prisma.ExerciseAttemptUpsertWithWhereUniqueWithoutExerciseInput[]
  createMany?: Prisma.ExerciseAttemptCreateManyExerciseInputEnvelope
  set?: Prisma.ExerciseAttemptWhereUniqueInput | Prisma.ExerciseAttemptWhereUniqueInput[]
  disconnect?: Prisma.ExerciseAttemptWhereUniqueInput | Prisma.ExerciseAttemptWhereUniqueInput[]
  delete?: Prisma.ExerciseAttemptWhereUniqueInput | Prisma.ExerciseAttemptWhereUniqueInput[]
  connect?: Prisma.ExerciseAttemptWhereUniqueInput | Prisma.ExerciseAttemptWhereUniqueInput[]
  update?: Prisma.ExerciseAttemptUpdateWithWhereUniqueWithoutExerciseInput | Prisma.ExerciseAttemptUpdateWithWhereUniqueWithoutExerciseInput[]
  updateMany?: Prisma.ExerciseAttemptUpdateManyWithWhereWithoutExerciseInput | Prisma.ExerciseAttemptUpdateManyWithWhereWithoutExerciseInput[]
  deleteMany?: Prisma.ExerciseAttemptScalarWhereInput | Prisma.ExerciseAttemptScalarWhereInput[]
}

export type ExerciseAttemptCreateWithoutUserInput = {
  id?: string
  answer: string
  correct: boolean
  timestamp?: Date | string
  exercise: Prisma.ExerciseCreateNestedOneWithoutAttemptsInput
}

export type ExerciseAttemptUncheckedCreateWithoutUserInput = {
  id?: string
  exerciseId: number
  answer: string
  correct: boolean
  timestamp?: Date | string
}

export type ExerciseAttemptCreateOrConnectWithoutUserInput = {
  where: Prisma.ExerciseAttemptWhereUniqueInput
  create: Prisma.XOR<Prisma.ExerciseAttemptCreateWithoutUserInput, Prisma.ExerciseAttemptUncheckedCreateWithoutUserInput>
}

export type ExerciseAttemptCreateManyUserInputEnvelope = {
  data: Prisma.ExerciseAttemptCreateManyUserInput | Prisma.ExerciseAttemptCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type ExerciseAttemptUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.ExerciseAttemptWhereUniqueInput
  update: Prisma.XOR<Prisma.ExerciseAttemptUpdateWithoutUserInput, Prisma.ExerciseAttemptUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.ExerciseAttemptCreateWithoutUserInput, Prisma.ExerciseAttemptUncheckedCreateWithoutUserInput>
}

export type ExerciseAttemptUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.ExerciseAttemptWhereUniqueInput
  data: Prisma.XOR<Prisma.ExerciseAttemptUpdateWithoutUserInput, Prisma.ExerciseAttemptUncheckedUpdateWithoutUserInput>
}

export type ExerciseAttemptUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.ExerciseAttemptScalarWhereInput
  data: Prisma.XOR<Prisma.ExerciseAttemptUpdateManyMutationInput, Prisma.ExerciseAttemptUncheckedUpdateManyWithoutUserInput>
}

export type ExerciseAttemptScalarWhereInput = {
  AND?: Prisma.ExerciseAttemptScalarWhereInput | Prisma.ExerciseAttemptScalarWhereInput[]
  OR?: Prisma.ExerciseAttemptScalarWhereInput[]
  NOT?: Prisma.ExerciseAttemptScalarWhereInput | Prisma.ExerciseAttemptScalarWhereInput[]
  id?: Prisma.StringFilter<"ExerciseAttempt"> | string
  exerciseId?: Prisma.IntFilter<"ExerciseAttempt"> | number
  userId?: Prisma.StringFilter<"ExerciseAttempt"> | string
  answer?: Prisma.StringFilter<"ExerciseAttempt"> | string
  correct?: Prisma.BoolFilter<"ExerciseAttempt"> | boolean
  timestamp?: Prisma.DateTimeFilter<"ExerciseAttempt"> | Date | string
}

export type ExerciseAttemptCreateWithoutExerciseInput = {
  id?: string
  answer: string
  correct: boolean
  timestamp?: Date | string
  user: Prisma.UserCreateNestedOneWithoutExerciseAttemptsInput
}

export type ExerciseAttemptUncheckedCreateWithoutExerciseInput = {
  id?: string
  userId: string
  answer: string
  correct: boolean
  timestamp?: Date | string
}

export type ExerciseAttemptCreateOrConnectWithoutExerciseInput = {
  where: Prisma.ExerciseAttemptWhereUniqueInput
  create: Prisma.XOR<Prisma.ExerciseAttemptCreateWithoutExerciseInput, Prisma.ExerciseAttemptUncheckedCreateWithoutExerciseInput>
}

export type ExerciseAttemptCreateManyExerciseInputEnvelope = {
  data: Prisma.ExerciseAttemptCreateManyExerciseInput | Prisma.ExerciseAttemptCreateManyExerciseInput[]
  skipDuplicates?: boolean
}

export type ExerciseAttemptUpsertWithWhereUniqueWithoutExerciseInput = {
  where: Prisma.ExerciseAttemptWhereUniqueInput
  update: Prisma.XOR<Prisma.ExerciseAttemptUpdateWithoutExerciseInput, Prisma.ExerciseAttemptUncheckedUpdateWithoutExerciseInput>
  create: Prisma.XOR<Prisma.ExerciseAttemptCreateWithoutExerciseInput, Prisma.ExerciseAttemptUncheckedCreateWithoutExerciseInput>
}

export type ExerciseAttemptUpdateWithWhereUniqueWithoutExerciseInput = {
  where: Prisma.ExerciseAttemptWhereUniqueInput
  data: Prisma.XOR<Prisma.ExerciseAttemptUpdateWithoutExerciseInput, Prisma.ExerciseAttemptUncheckedUpdateWithoutExerciseInput>
}

export type ExerciseAttemptUpdateManyWithWhereWithoutExerciseInput = {
  where: Prisma.ExerciseAttemptScalarWhereInput
  data: Prisma.XOR<Prisma.ExerciseAttemptUpdateManyMutationInput, Prisma.ExerciseAttemptUncheckedUpdateManyWithoutExerciseInput>
}

export type ExerciseAttemptCreateManyUserInput = {
  id?: string
  exerciseId: number
  answer: string
  correct: boolean
  timestamp?: Date | string
}

export type ExerciseAttemptUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  answer?: Prisma.StringFieldUpdateOperationsInput | string
  correct?: Prisma.BoolFieldUpdateOperationsInput | boolean
  timestamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  exercise?: Prisma.ExerciseUpdateOneRequiredWithoutAttemptsNestedInput
}

export type ExerciseAttemptUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  exerciseId?: Prisma.IntFieldUpdateOperationsInput | number
  answer?: Prisma.StringFieldUpdateOperationsInput | string
  correct?: Prisma.BoolFieldUpdateOperationsInput | boolean
  timestamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ExerciseAttemptUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  exerciseId?: Prisma.IntFieldUpdateOperationsInput | number
  answer?: Prisma.StringFieldUpdateOperationsInput | string
  correct?: Prisma.BoolFieldUpdateOperationsInput | boolean
  timestamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ExerciseAttemptCreateManyExerciseInput = {
  id?: string
  userId: string
  answer: string
  correct: boolean
  timestamp?: Date | string
}

export type ExerciseAttemptUpdateWithoutExerciseInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  answer?: Prisma.StringFieldUpdateOperationsInput | string
  correct?: Prisma.BoolFieldUpdateOperationsInput | boolean
  timestamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutExerciseAttemptsNestedInput
}

export type ExerciseAttemptUncheckedUpdateWithoutExerciseInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  answer?: Prisma.StringFieldUpdateOperationsInput | string
  correct?: Prisma.BoolFieldUpdateOperationsInput | boolean
  timestamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ExerciseAttemptUncheckedUpdateManyWithoutExerciseInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  answer?: Prisma.StringFieldUpdateOperationsInput | string
  correct?: Prisma.BoolFieldUpdateOperationsInput | boolean
  timestamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type ExerciseAttemptSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  exerciseId?: boolean
  userId?: boolean
  answer?: boolean
  correct?: boolean
  timestamp?: boolean
  exercise?: boolean | Prisma.ExerciseDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["exerciseAttempt"]>

export type ExerciseAttemptSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  exerciseId?: boolean
  userId?: boolean
  answer?: boolean
  correct?: boolean
  timestamp?: boolean
  exercise?: boolean | Prisma.ExerciseDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["exerciseAttempt"]>

export type ExerciseAttemptSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  exerciseId?: boolean
  userId?: boolean
  answer?: boolean
  correct?: boolean
  timestamp?: boolean
  exercise?: boolean | Prisma.ExerciseDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["exerciseAttempt"]>

export type ExerciseAttemptSelectScalar = {
  id?: boolean
  exerciseId?: boolean
  userId?: boolean
  answer?: boolean
  correct?: boolean
  timestamp?: boolean
}

export type ExerciseAttemptOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "exerciseId" | "userId" | "answer" | "correct" | "timestamp", ExtArgs["result"]["exerciseAttempt"]>
export type ExerciseAttemptInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  exercise?: boolean | Prisma.ExerciseDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type ExerciseAttemptIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  exercise?: boolean | Prisma.ExerciseDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type ExerciseAttemptIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  exercise?: boolean | Prisma.ExerciseDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $ExerciseAttemptPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ExerciseAttempt"
  objects: {
    exercise: Prisma.$ExercisePayload<ExtArgs>
    user: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    exerciseId: number
    userId: string
    answer: string
    correct: boolean
    timestamp: Date
  }, ExtArgs["result"]["exerciseAttempt"]>
  composites: {}
}

export type ExerciseAttemptGetPayload<S extends boolean | null | undefined | ExerciseAttemptDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ExerciseAttemptPayload, S>

export type ExerciseAttemptCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ExerciseAttemptFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ExerciseAttemptCountAggregateInputType | true
  }

export interface ExerciseAttemptDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ExerciseAttempt'], meta: { name: 'ExerciseAttempt' } }
  /**
   * Find zero or one ExerciseAttempt that matches the filter.
   * @param {ExerciseAttemptFindUniqueArgs} args - Arguments to find a ExerciseAttempt
   * @example
   * // Get one ExerciseAttempt
   * const exerciseAttempt = await prisma.exerciseAttempt.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ExerciseAttemptFindUniqueArgs>(args: Prisma.SelectSubset<T, ExerciseAttemptFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ExerciseAttemptClient<runtime.Types.Result.GetResult<Prisma.$ExerciseAttemptPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ExerciseAttempt that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ExerciseAttemptFindUniqueOrThrowArgs} args - Arguments to find a ExerciseAttempt
   * @example
   * // Get one ExerciseAttempt
   * const exerciseAttempt = await prisma.exerciseAttempt.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ExerciseAttemptFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ExerciseAttemptFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ExerciseAttemptClient<runtime.Types.Result.GetResult<Prisma.$ExerciseAttemptPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ExerciseAttempt that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExerciseAttemptFindFirstArgs} args - Arguments to find a ExerciseAttempt
   * @example
   * // Get one ExerciseAttempt
   * const exerciseAttempt = await prisma.exerciseAttempt.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ExerciseAttemptFindFirstArgs>(args?: Prisma.SelectSubset<T, ExerciseAttemptFindFirstArgs<ExtArgs>>): Prisma.Prisma__ExerciseAttemptClient<runtime.Types.Result.GetResult<Prisma.$ExerciseAttemptPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ExerciseAttempt that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExerciseAttemptFindFirstOrThrowArgs} args - Arguments to find a ExerciseAttempt
   * @example
   * // Get one ExerciseAttempt
   * const exerciseAttempt = await prisma.exerciseAttempt.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ExerciseAttemptFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ExerciseAttemptFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ExerciseAttemptClient<runtime.Types.Result.GetResult<Prisma.$ExerciseAttemptPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ExerciseAttempts that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExerciseAttemptFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ExerciseAttempts
   * const exerciseAttempts = await prisma.exerciseAttempt.findMany()
   * 
   * // Get first 10 ExerciseAttempts
   * const exerciseAttempts = await prisma.exerciseAttempt.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const exerciseAttemptWithIdOnly = await prisma.exerciseAttempt.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ExerciseAttemptFindManyArgs>(args?: Prisma.SelectSubset<T, ExerciseAttemptFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ExerciseAttemptPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ExerciseAttempt.
   * @param {ExerciseAttemptCreateArgs} args - Arguments to create a ExerciseAttempt.
   * @example
   * // Create one ExerciseAttempt
   * const ExerciseAttempt = await prisma.exerciseAttempt.create({
   *   data: {
   *     // ... data to create a ExerciseAttempt
   *   }
   * })
   * 
   */
  create<T extends ExerciseAttemptCreateArgs>(args: Prisma.SelectSubset<T, ExerciseAttemptCreateArgs<ExtArgs>>): Prisma.Prisma__ExerciseAttemptClient<runtime.Types.Result.GetResult<Prisma.$ExerciseAttemptPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ExerciseAttempts.
   * @param {ExerciseAttemptCreateManyArgs} args - Arguments to create many ExerciseAttempts.
   * @example
   * // Create many ExerciseAttempts
   * const exerciseAttempt = await prisma.exerciseAttempt.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ExerciseAttemptCreateManyArgs>(args?: Prisma.SelectSubset<T, ExerciseAttemptCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ExerciseAttempts and returns the data saved in the database.
   * @param {ExerciseAttemptCreateManyAndReturnArgs} args - Arguments to create many ExerciseAttempts.
   * @example
   * // Create many ExerciseAttempts
   * const exerciseAttempt = await prisma.exerciseAttempt.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ExerciseAttempts and only return the `id`
   * const exerciseAttemptWithIdOnly = await prisma.exerciseAttempt.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ExerciseAttemptCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ExerciseAttemptCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ExerciseAttemptPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ExerciseAttempt.
   * @param {ExerciseAttemptDeleteArgs} args - Arguments to delete one ExerciseAttempt.
   * @example
   * // Delete one ExerciseAttempt
   * const ExerciseAttempt = await prisma.exerciseAttempt.delete({
   *   where: {
   *     // ... filter to delete one ExerciseAttempt
   *   }
   * })
   * 
   */
  delete<T extends ExerciseAttemptDeleteArgs>(args: Prisma.SelectSubset<T, ExerciseAttemptDeleteArgs<ExtArgs>>): Prisma.Prisma__ExerciseAttemptClient<runtime.Types.Result.GetResult<Prisma.$ExerciseAttemptPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ExerciseAttempt.
   * @param {ExerciseAttemptUpdateArgs} args - Arguments to update one ExerciseAttempt.
   * @example
   * // Update one ExerciseAttempt
   * const exerciseAttempt = await prisma.exerciseAttempt.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ExerciseAttemptUpdateArgs>(args: Prisma.SelectSubset<T, ExerciseAttemptUpdateArgs<ExtArgs>>): Prisma.Prisma__ExerciseAttemptClient<runtime.Types.Result.GetResult<Prisma.$ExerciseAttemptPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ExerciseAttempts.
   * @param {ExerciseAttemptDeleteManyArgs} args - Arguments to filter ExerciseAttempts to delete.
   * @example
   * // Delete a few ExerciseAttempts
   * const { count } = await prisma.exerciseAttempt.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ExerciseAttemptDeleteManyArgs>(args?: Prisma.SelectSubset<T, ExerciseAttemptDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ExerciseAttempts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExerciseAttemptUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ExerciseAttempts
   * const exerciseAttempt = await prisma.exerciseAttempt.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ExerciseAttemptUpdateManyArgs>(args: Prisma.SelectSubset<T, ExerciseAttemptUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ExerciseAttempts and returns the data updated in the database.
   * @param {ExerciseAttemptUpdateManyAndReturnArgs} args - Arguments to update many ExerciseAttempts.
   * @example
   * // Update many ExerciseAttempts
   * const exerciseAttempt = await prisma.exerciseAttempt.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ExerciseAttempts and only return the `id`
   * const exerciseAttemptWithIdOnly = await prisma.exerciseAttempt.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ExerciseAttemptUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ExerciseAttemptUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ExerciseAttemptPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ExerciseAttempt.
   * @param {ExerciseAttemptUpsertArgs} args - Arguments to update or create a ExerciseAttempt.
   * @example
   * // Update or create a ExerciseAttempt
   * const exerciseAttempt = await prisma.exerciseAttempt.upsert({
   *   create: {
   *     // ... data to create a ExerciseAttempt
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ExerciseAttempt we want to update
   *   }
   * })
   */
  upsert<T extends ExerciseAttemptUpsertArgs>(args: Prisma.SelectSubset<T, ExerciseAttemptUpsertArgs<ExtArgs>>): Prisma.Prisma__ExerciseAttemptClient<runtime.Types.Result.GetResult<Prisma.$ExerciseAttemptPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ExerciseAttempts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExerciseAttemptCountArgs} args - Arguments to filter ExerciseAttempts to count.
   * @example
   * // Count the number of ExerciseAttempts
   * const count = await prisma.exerciseAttempt.count({
   *   where: {
   *     // ... the filter for the ExerciseAttempts we want to count
   *   }
   * })
  **/
  count<T extends ExerciseAttemptCountArgs>(
    args?: Prisma.Subset<T, ExerciseAttemptCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ExerciseAttemptCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ExerciseAttempt.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExerciseAttemptAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ExerciseAttemptAggregateArgs>(args: Prisma.Subset<T, ExerciseAttemptAggregateArgs>): Prisma.PrismaPromise<GetExerciseAttemptAggregateType<T>>

  /**
   * Group by ExerciseAttempt.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExerciseAttemptGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ExerciseAttemptGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ExerciseAttemptGroupByArgs['orderBy'] }
      : { orderBy?: ExerciseAttemptGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ExerciseAttemptGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExerciseAttemptGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ExerciseAttempt model
 */
readonly fields: ExerciseAttemptFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ExerciseAttempt.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ExerciseAttemptClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  exercise<T extends Prisma.ExerciseDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ExerciseDefaultArgs<ExtArgs>>): Prisma.Prisma__ExerciseClient<runtime.Types.Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ExerciseAttempt model
 */
export interface ExerciseAttemptFieldRefs {
  readonly id: Prisma.FieldRef<"ExerciseAttempt", 'String'>
  readonly exerciseId: Prisma.FieldRef<"ExerciseAttempt", 'Int'>
  readonly userId: Prisma.FieldRef<"ExerciseAttempt", 'String'>
  readonly answer: Prisma.FieldRef<"ExerciseAttempt", 'String'>
  readonly correct: Prisma.FieldRef<"ExerciseAttempt", 'Boolean'>
  readonly timestamp: Prisma.FieldRef<"ExerciseAttempt", 'DateTime'>
}
    

// Custom InputTypes
/**
 * ExerciseAttempt findUnique
 */
export type ExerciseAttemptFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExerciseAttempt
   */
  select?: Prisma.ExerciseAttemptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExerciseAttempt
   */
  omit?: Prisma.ExerciseAttemptOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExerciseAttemptInclude<ExtArgs> | null
  /**
   * Filter, which ExerciseAttempt to fetch.
   */
  where: Prisma.ExerciseAttemptWhereUniqueInput
}

/**
 * ExerciseAttempt findUniqueOrThrow
 */
export type ExerciseAttemptFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExerciseAttempt
   */
  select?: Prisma.ExerciseAttemptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExerciseAttempt
   */
  omit?: Prisma.ExerciseAttemptOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExerciseAttemptInclude<ExtArgs> | null
  /**
   * Filter, which ExerciseAttempt to fetch.
   */
  where: Prisma.ExerciseAttemptWhereUniqueInput
}

/**
 * ExerciseAttempt findFirst
 */
export type ExerciseAttemptFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExerciseAttempt
   */
  select?: Prisma.ExerciseAttemptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExerciseAttempt
   */
  omit?: Prisma.ExerciseAttemptOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExerciseAttemptInclude<ExtArgs> | null
  /**
   * Filter, which ExerciseAttempt to fetch.
   */
  where?: Prisma.ExerciseAttemptWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ExerciseAttempts to fetch.
   */
  orderBy?: Prisma.ExerciseAttemptOrderByWithRelationInput | Prisma.ExerciseAttemptOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ExerciseAttempts.
   */
  cursor?: Prisma.ExerciseAttemptWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ExerciseAttempts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ExerciseAttempts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ExerciseAttempts.
   */
  distinct?: Prisma.ExerciseAttemptScalarFieldEnum | Prisma.ExerciseAttemptScalarFieldEnum[]
}

/**
 * ExerciseAttempt findFirstOrThrow
 */
export type ExerciseAttemptFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExerciseAttempt
   */
  select?: Prisma.ExerciseAttemptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExerciseAttempt
   */
  omit?: Prisma.ExerciseAttemptOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExerciseAttemptInclude<ExtArgs> | null
  /**
   * Filter, which ExerciseAttempt to fetch.
   */
  where?: Prisma.ExerciseAttemptWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ExerciseAttempts to fetch.
   */
  orderBy?: Prisma.ExerciseAttemptOrderByWithRelationInput | Prisma.ExerciseAttemptOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ExerciseAttempts.
   */
  cursor?: Prisma.ExerciseAttemptWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ExerciseAttempts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ExerciseAttempts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ExerciseAttempts.
   */
  distinct?: Prisma.ExerciseAttemptScalarFieldEnum | Prisma.ExerciseAttemptScalarFieldEnum[]
}

/**
 * ExerciseAttempt findMany
 */
export type ExerciseAttemptFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExerciseAttempt
   */
  select?: Prisma.ExerciseAttemptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExerciseAttempt
   */
  omit?: Prisma.ExerciseAttemptOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExerciseAttemptInclude<ExtArgs> | null
  /**
   * Filter, which ExerciseAttempts to fetch.
   */
  where?: Prisma.ExerciseAttemptWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ExerciseAttempts to fetch.
   */
  orderBy?: Prisma.ExerciseAttemptOrderByWithRelationInput | Prisma.ExerciseAttemptOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ExerciseAttempts.
   */
  cursor?: Prisma.ExerciseAttemptWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ExerciseAttempts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ExerciseAttempts.
   */
  skip?: number
  distinct?: Prisma.ExerciseAttemptScalarFieldEnum | Prisma.ExerciseAttemptScalarFieldEnum[]
}

/**
 * ExerciseAttempt create
 */
export type ExerciseAttemptCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExerciseAttempt
   */
  select?: Prisma.ExerciseAttemptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExerciseAttempt
   */
  omit?: Prisma.ExerciseAttemptOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExerciseAttemptInclude<ExtArgs> | null
  /**
   * The data needed to create a ExerciseAttempt.
   */
  data: Prisma.XOR<Prisma.ExerciseAttemptCreateInput, Prisma.ExerciseAttemptUncheckedCreateInput>
}

/**
 * ExerciseAttempt createMany
 */
export type ExerciseAttemptCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ExerciseAttempts.
   */
  data: Prisma.ExerciseAttemptCreateManyInput | Prisma.ExerciseAttemptCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ExerciseAttempt createManyAndReturn
 */
export type ExerciseAttemptCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExerciseAttempt
   */
  select?: Prisma.ExerciseAttemptSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ExerciseAttempt
   */
  omit?: Prisma.ExerciseAttemptOmit<ExtArgs> | null
  /**
   * The data used to create many ExerciseAttempts.
   */
  data: Prisma.ExerciseAttemptCreateManyInput | Prisma.ExerciseAttemptCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExerciseAttemptIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * ExerciseAttempt update
 */
export type ExerciseAttemptUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExerciseAttempt
   */
  select?: Prisma.ExerciseAttemptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExerciseAttempt
   */
  omit?: Prisma.ExerciseAttemptOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExerciseAttemptInclude<ExtArgs> | null
  /**
   * The data needed to update a ExerciseAttempt.
   */
  data: Prisma.XOR<Prisma.ExerciseAttemptUpdateInput, Prisma.ExerciseAttemptUncheckedUpdateInput>
  /**
   * Choose, which ExerciseAttempt to update.
   */
  where: Prisma.ExerciseAttemptWhereUniqueInput
}

/**
 * ExerciseAttempt updateMany
 */
export type ExerciseAttemptUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ExerciseAttempts.
   */
  data: Prisma.XOR<Prisma.ExerciseAttemptUpdateManyMutationInput, Prisma.ExerciseAttemptUncheckedUpdateManyInput>
  /**
   * Filter which ExerciseAttempts to update
   */
  where?: Prisma.ExerciseAttemptWhereInput
  /**
   * Limit how many ExerciseAttempts to update.
   */
  limit?: number
}

/**
 * ExerciseAttempt updateManyAndReturn
 */
export type ExerciseAttemptUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExerciseAttempt
   */
  select?: Prisma.ExerciseAttemptSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ExerciseAttempt
   */
  omit?: Prisma.ExerciseAttemptOmit<ExtArgs> | null
  /**
   * The data used to update ExerciseAttempts.
   */
  data: Prisma.XOR<Prisma.ExerciseAttemptUpdateManyMutationInput, Prisma.ExerciseAttemptUncheckedUpdateManyInput>
  /**
   * Filter which ExerciseAttempts to update
   */
  where?: Prisma.ExerciseAttemptWhereInput
  /**
   * Limit how many ExerciseAttempts to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExerciseAttemptIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * ExerciseAttempt upsert
 */
export type ExerciseAttemptUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExerciseAttempt
   */
  select?: Prisma.ExerciseAttemptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExerciseAttempt
   */
  omit?: Prisma.ExerciseAttemptOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExerciseAttemptInclude<ExtArgs> | null
  /**
   * The filter to search for the ExerciseAttempt to update in case it exists.
   */
  where: Prisma.ExerciseAttemptWhereUniqueInput
  /**
   * In case the ExerciseAttempt found by the `where` argument doesn't exist, create a new ExerciseAttempt with this data.
   */
  create: Prisma.XOR<Prisma.ExerciseAttemptCreateInput, Prisma.ExerciseAttemptUncheckedCreateInput>
  /**
   * In case the ExerciseAttempt was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ExerciseAttemptUpdateInput, Prisma.ExerciseAttemptUncheckedUpdateInput>
}

/**
 * ExerciseAttempt delete
 */
export type ExerciseAttemptDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExerciseAttempt
   */
  select?: Prisma.ExerciseAttemptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExerciseAttempt
   */
  omit?: Prisma.ExerciseAttemptOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExerciseAttemptInclude<ExtArgs> | null
  /**
   * Filter which ExerciseAttempt to delete.
   */
  where: Prisma.ExerciseAttemptWhereUniqueInput
}

/**
 * ExerciseAttempt deleteMany
 */
export type ExerciseAttemptDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ExerciseAttempts to delete
   */
  where?: Prisma.ExerciseAttemptWhereInput
  /**
   * Limit how many ExerciseAttempts to delete.
   */
  limit?: number
}

/**
 * ExerciseAttempt without action
 */
export type ExerciseAttemptDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExerciseAttempt
   */
  select?: Prisma.ExerciseAttemptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExerciseAttempt
   */
  omit?: Prisma.ExerciseAttemptOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExerciseAttemptInclude<ExtArgs> | null
}
