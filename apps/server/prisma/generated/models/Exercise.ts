
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Exercise` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Exercise
 * 
 */
export type ExerciseModel = runtime.Types.Result.DefaultSelection<Prisma.$ExercisePayload>

export type AggregateExercise = {
  _count: ExerciseCountAggregateOutputType | null
  _avg: ExerciseAvgAggregateOutputType | null
  _sum: ExerciseSumAggregateOutputType | null
  _min: ExerciseMinAggregateOutputType | null
  _max: ExerciseMaxAggregateOutputType | null
}

export type ExerciseAvgAggregateOutputType = {
  id: number | null
  orderNumber: number | null
  lessonId: number | null
}

export type ExerciseSumAggregateOutputType = {
  id: number | null
  orderNumber: number | null
  lessonId: number | null
}

export type ExerciseMinAggregateOutputType = {
  id: number | null
  type: $Enums.ExerciseType | null
  audioUrl: string | null
  imageUrl: string | null
  prompt: string | null
  correctAnswer: string | null
  englishTranslation: string | null
  orderNumber: number | null
  lessonId: number | null
}

export type ExerciseMaxAggregateOutputType = {
  id: number | null
  type: $Enums.ExerciseType | null
  audioUrl: string | null
  imageUrl: string | null
  prompt: string | null
  correctAnswer: string | null
  englishTranslation: string | null
  orderNumber: number | null
  lessonId: number | null
}

export type ExerciseCountAggregateOutputType = {
  id: number
  type: number
  audioUrl: number
  imageUrl: number
  prompt: number
  correctAnswer: number
  englishTranslation: number
  options: number
  letterGroups: number
  orderNumber: number
  lessonId: number
  _all: number
}


export type ExerciseAvgAggregateInputType = {
  id?: true
  orderNumber?: true
  lessonId?: true
}

export type ExerciseSumAggregateInputType = {
  id?: true
  orderNumber?: true
  lessonId?: true
}

export type ExerciseMinAggregateInputType = {
  id?: true
  type?: true
  audioUrl?: true
  imageUrl?: true
  prompt?: true
  correctAnswer?: true
  englishTranslation?: true
  orderNumber?: true
  lessonId?: true
}

export type ExerciseMaxAggregateInputType = {
  id?: true
  type?: true
  audioUrl?: true
  imageUrl?: true
  prompt?: true
  correctAnswer?: true
  englishTranslation?: true
  orderNumber?: true
  lessonId?: true
}

export type ExerciseCountAggregateInputType = {
  id?: true
  type?: true
  audioUrl?: true
  imageUrl?: true
  prompt?: true
  correctAnswer?: true
  englishTranslation?: true
  options?: true
  letterGroups?: true
  orderNumber?: true
  lessonId?: true
  _all?: true
}

export type ExerciseAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Exercise to aggregate.
   */
  where?: Prisma.ExerciseWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Exercises to fetch.
   */
  orderBy?: Prisma.ExerciseOrderByWithRelationInput | Prisma.ExerciseOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ExerciseWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Exercises from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Exercises.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Exercises
  **/
  _count?: true | ExerciseCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ExerciseAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ExerciseSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ExerciseMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ExerciseMaxAggregateInputType
}

export type GetExerciseAggregateType<T extends ExerciseAggregateArgs> = {
      [P in keyof T & keyof AggregateExercise]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateExercise[P]>
    : Prisma.GetScalarType<T[P], AggregateExercise[P]>
}




export type ExerciseGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ExerciseWhereInput
  orderBy?: Prisma.ExerciseOrderByWithAggregationInput | Prisma.ExerciseOrderByWithAggregationInput[]
  by: Prisma.ExerciseScalarFieldEnum[] | Prisma.ExerciseScalarFieldEnum
  having?: Prisma.ExerciseScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ExerciseCountAggregateInputType | true
  _avg?: ExerciseAvgAggregateInputType
  _sum?: ExerciseSumAggregateInputType
  _min?: ExerciseMinAggregateInputType
  _max?: ExerciseMaxAggregateInputType
}

export type ExerciseGroupByOutputType = {
  id: number
  type: $Enums.ExerciseType
  audioUrl: string | null
  imageUrl: string | null
  prompt: string | null
  correctAnswer: string
  englishTranslation: string | null
  options: runtime.JsonValue | null
  letterGroups: runtime.JsonValue | null
  orderNumber: number
  lessonId: number
  _count: ExerciseCountAggregateOutputType | null
  _avg: ExerciseAvgAggregateOutputType | null
  _sum: ExerciseSumAggregateOutputType | null
  _min: ExerciseMinAggregateOutputType | null
  _max: ExerciseMaxAggregateOutputType | null
}

type GetExerciseGroupByPayload<T extends ExerciseGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ExerciseGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ExerciseGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ExerciseGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ExerciseGroupByOutputType[P]>
      }
    >
  > 



export type ExerciseWhereInput = {
  AND?: Prisma.ExerciseWhereInput | Prisma.ExerciseWhereInput[]
  OR?: Prisma.ExerciseWhereInput[]
  NOT?: Prisma.ExerciseWhereInput | Prisma.ExerciseWhereInput[]
  id?: Prisma.IntFilter<"Exercise"> | number
  type?: Prisma.EnumExerciseTypeFilter<"Exercise"> | $Enums.ExerciseType
  audioUrl?: Prisma.StringNullableFilter<"Exercise"> | string | null
  imageUrl?: Prisma.StringNullableFilter<"Exercise"> | string | null
  prompt?: Prisma.StringNullableFilter<"Exercise"> | string | null
  correctAnswer?: Prisma.StringFilter<"Exercise"> | string
  englishTranslation?: Prisma.StringNullableFilter<"Exercise"> | string | null
  options?: Prisma.JsonNullableFilter<"Exercise">
  letterGroups?: Prisma.JsonNullableFilter<"Exercise">
  orderNumber?: Prisma.IntFilter<"Exercise"> | number
  lessonId?: Prisma.IntFilter<"Exercise"> | number
  lesson?: Prisma.XOR<Prisma.LessonScalarRelationFilter, Prisma.LessonWhereInput>
  attempts?: Prisma.ExerciseAttemptListRelationFilter
}

export type ExerciseOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  type?: Prisma.SortOrder
  audioUrl?: Prisma.SortOrderInput | Prisma.SortOrder
  imageUrl?: Prisma.SortOrderInput | Prisma.SortOrder
  prompt?: Prisma.SortOrderInput | Prisma.SortOrder
  correctAnswer?: Prisma.SortOrder
  englishTranslation?: Prisma.SortOrderInput | Prisma.SortOrder
  options?: Prisma.SortOrderInput | Prisma.SortOrder
  letterGroups?: Prisma.SortOrderInput | Prisma.SortOrder
  orderNumber?: Prisma.SortOrder
  lessonId?: Prisma.SortOrder
  lesson?: Prisma.LessonOrderByWithRelationInput
  attempts?: Prisma.ExerciseAttemptOrderByRelationAggregateInput
}

export type ExerciseWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.ExerciseWhereInput | Prisma.ExerciseWhereInput[]
  OR?: Prisma.ExerciseWhereInput[]
  NOT?: Prisma.ExerciseWhereInput | Prisma.ExerciseWhereInput[]
  type?: Prisma.EnumExerciseTypeFilter<"Exercise"> | $Enums.ExerciseType
  audioUrl?: Prisma.StringNullableFilter<"Exercise"> | string | null
  imageUrl?: Prisma.StringNullableFilter<"Exercise"> | string | null
  prompt?: Prisma.StringNullableFilter<"Exercise"> | string | null
  correctAnswer?: Prisma.StringFilter<"Exercise"> | string
  englishTranslation?: Prisma.StringNullableFilter<"Exercise"> | string | null
  options?: Prisma.JsonNullableFilter<"Exercise">
  letterGroups?: Prisma.JsonNullableFilter<"Exercise">
  orderNumber?: Prisma.IntFilter<"Exercise"> | number
  lessonId?: Prisma.IntFilter<"Exercise"> | number
  lesson?: Prisma.XOR<Prisma.LessonScalarRelationFilter, Prisma.LessonWhereInput>
  attempts?: Prisma.ExerciseAttemptListRelationFilter
}, "id">

export type ExerciseOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  type?: Prisma.SortOrder
  audioUrl?: Prisma.SortOrderInput | Prisma.SortOrder
  imageUrl?: Prisma.SortOrderInput | Prisma.SortOrder
  prompt?: Prisma.SortOrderInput | Prisma.SortOrder
  correctAnswer?: Prisma.SortOrder
  englishTranslation?: Prisma.SortOrderInput | Prisma.SortOrder
  options?: Prisma.SortOrderInput | Prisma.SortOrder
  letterGroups?: Prisma.SortOrderInput | Prisma.SortOrder
  orderNumber?: Prisma.SortOrder
  lessonId?: Prisma.SortOrder
  _count?: Prisma.ExerciseCountOrderByAggregateInput
  _avg?: Prisma.ExerciseAvgOrderByAggregateInput
  _max?: Prisma.ExerciseMaxOrderByAggregateInput
  _min?: Prisma.ExerciseMinOrderByAggregateInput
  _sum?: Prisma.ExerciseSumOrderByAggregateInput
}

export type ExerciseScalarWhereWithAggregatesInput = {
  AND?: Prisma.ExerciseScalarWhereWithAggregatesInput | Prisma.ExerciseScalarWhereWithAggregatesInput[]
  OR?: Prisma.ExerciseScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ExerciseScalarWhereWithAggregatesInput | Prisma.ExerciseScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Exercise"> | number
  type?: Prisma.EnumExerciseTypeWithAggregatesFilter<"Exercise"> | $Enums.ExerciseType
  audioUrl?: Prisma.StringNullableWithAggregatesFilter<"Exercise"> | string | null
  imageUrl?: Prisma.StringNullableWithAggregatesFilter<"Exercise"> | string | null
  prompt?: Prisma.StringNullableWithAggregatesFilter<"Exercise"> | string | null
  correctAnswer?: Prisma.StringWithAggregatesFilter<"Exercise"> | string
  englishTranslation?: Prisma.StringNullableWithAggregatesFilter<"Exercise"> | string | null
  options?: Prisma.JsonNullableWithAggregatesFilter<"Exercise">
  letterGroups?: Prisma.JsonNullableWithAggregatesFilter<"Exercise">
  orderNumber?: Prisma.IntWithAggregatesFilter<"Exercise"> | number
  lessonId?: Prisma.IntWithAggregatesFilter<"Exercise"> | number
}

export type ExerciseCreateInput = {
  type: $Enums.ExerciseType
  audioUrl?: string | null
  imageUrl?: string | null
  prompt?: string | null
  correctAnswer: string
  englishTranslation?: string | null
  options?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  letterGroups?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  orderNumber: number
  lesson: Prisma.LessonCreateNestedOneWithoutExercisesInput
  attempts?: Prisma.ExerciseAttemptCreateNestedManyWithoutExerciseInput
}

export type ExerciseUncheckedCreateInput = {
  id?: number
  type: $Enums.ExerciseType
  audioUrl?: string | null
  imageUrl?: string | null
  prompt?: string | null
  correctAnswer: string
  englishTranslation?: string | null
  options?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  letterGroups?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  orderNumber: number
  lessonId: number
  attempts?: Prisma.ExerciseAttemptUncheckedCreateNestedManyWithoutExerciseInput
}

export type ExerciseUpdateInput = {
  type?: Prisma.EnumExerciseTypeFieldUpdateOperationsInput | $Enums.ExerciseType
  audioUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  imageUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  prompt?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  correctAnswer?: Prisma.StringFieldUpdateOperationsInput | string
  englishTranslation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  options?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  letterGroups?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  orderNumber?: Prisma.IntFieldUpdateOperationsInput | number
  lesson?: Prisma.LessonUpdateOneRequiredWithoutExercisesNestedInput
  attempts?: Prisma.ExerciseAttemptUpdateManyWithoutExerciseNestedInput
}

export type ExerciseUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  type?: Prisma.EnumExerciseTypeFieldUpdateOperationsInput | $Enums.ExerciseType
  audioUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  imageUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  prompt?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  correctAnswer?: Prisma.StringFieldUpdateOperationsInput | string
  englishTranslation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  options?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  letterGroups?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  orderNumber?: Prisma.IntFieldUpdateOperationsInput | number
  lessonId?: Prisma.IntFieldUpdateOperationsInput | number
  attempts?: Prisma.ExerciseAttemptUncheckedUpdateManyWithoutExerciseNestedInput
}

export type ExerciseCreateManyInput = {
  id?: number
  type: $Enums.ExerciseType
  audioUrl?: string | null
  imageUrl?: string | null
  prompt?: string | null
  correctAnswer: string
  englishTranslation?: string | null
  options?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  letterGroups?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  orderNumber: number
  lessonId: number
}

export type ExerciseUpdateManyMutationInput = {
  type?: Prisma.EnumExerciseTypeFieldUpdateOperationsInput | $Enums.ExerciseType
  audioUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  imageUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  prompt?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  correctAnswer?: Prisma.StringFieldUpdateOperationsInput | string
  englishTranslation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  options?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  letterGroups?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  orderNumber?: Prisma.IntFieldUpdateOperationsInput | number
}

export type ExerciseUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  type?: Prisma.EnumExerciseTypeFieldUpdateOperationsInput | $Enums.ExerciseType
  audioUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  imageUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  prompt?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  correctAnswer?: Prisma.StringFieldUpdateOperationsInput | string
  englishTranslation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  options?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  letterGroups?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  orderNumber?: Prisma.IntFieldUpdateOperationsInput | number
  lessonId?: Prisma.IntFieldUpdateOperationsInput | number
}

export type ExerciseListRelationFilter = {
  every?: Prisma.ExerciseWhereInput
  some?: Prisma.ExerciseWhereInput
  none?: Prisma.ExerciseWhereInput
}

export type ExerciseOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ExerciseCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  type?: Prisma.SortOrder
  audioUrl?: Prisma.SortOrder
  imageUrl?: Prisma.SortOrder
  prompt?: Prisma.SortOrder
  correctAnswer?: Prisma.SortOrder
  englishTranslation?: Prisma.SortOrder
  options?: Prisma.SortOrder
  letterGroups?: Prisma.SortOrder
  orderNumber?: Prisma.SortOrder
  lessonId?: Prisma.SortOrder
}

export type ExerciseAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  orderNumber?: Prisma.SortOrder
  lessonId?: Prisma.SortOrder
}

export type ExerciseMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  type?: Prisma.SortOrder
  audioUrl?: Prisma.SortOrder
  imageUrl?: Prisma.SortOrder
  prompt?: Prisma.SortOrder
  correctAnswer?: Prisma.SortOrder
  englishTranslation?: Prisma.SortOrder
  orderNumber?: Prisma.SortOrder
  lessonId?: Prisma.SortOrder
}

export type ExerciseMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  type?: Prisma.SortOrder
  audioUrl?: Prisma.SortOrder
  imageUrl?: Prisma.SortOrder
  prompt?: Prisma.SortOrder
  correctAnswer?: Prisma.SortOrder
  englishTranslation?: Prisma.SortOrder
  orderNumber?: Prisma.SortOrder
  lessonId?: Prisma.SortOrder
}

export type ExerciseSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  orderNumber?: Prisma.SortOrder
  lessonId?: Prisma.SortOrder
}

export type ExerciseScalarRelationFilter = {
  is?: Prisma.ExerciseWhereInput
  isNot?: Prisma.ExerciseWhereInput
}

export type ExerciseCreateNestedManyWithoutLessonInput = {
  create?: Prisma.XOR<Prisma.ExerciseCreateWithoutLessonInput, Prisma.ExerciseUncheckedCreateWithoutLessonInput> | Prisma.ExerciseCreateWithoutLessonInput[] | Prisma.ExerciseUncheckedCreateWithoutLessonInput[]
  connectOrCreate?: Prisma.ExerciseCreateOrConnectWithoutLessonInput | Prisma.ExerciseCreateOrConnectWithoutLessonInput[]
  createMany?: Prisma.ExerciseCreateManyLessonInputEnvelope
  connect?: Prisma.ExerciseWhereUniqueInput | Prisma.ExerciseWhereUniqueInput[]
}

export type ExerciseUncheckedCreateNestedManyWithoutLessonInput = {
  create?: Prisma.XOR<Prisma.ExerciseCreateWithoutLessonInput, Prisma.ExerciseUncheckedCreateWithoutLessonInput> | Prisma.ExerciseCreateWithoutLessonInput[] | Prisma.ExerciseUncheckedCreateWithoutLessonInput[]
  connectOrCreate?: Prisma.ExerciseCreateOrConnectWithoutLessonInput | Prisma.ExerciseCreateOrConnectWithoutLessonInput[]
  createMany?: Prisma.ExerciseCreateManyLessonInputEnvelope
  connect?: Prisma.ExerciseWhereUniqueInput | Prisma.ExerciseWhereUniqueInput[]
}

export type ExerciseUpdateManyWithoutLessonNestedInput = {
  create?: Prisma.XOR<Prisma.ExerciseCreateWithoutLessonInput, Prisma.ExerciseUncheckedCreateWithoutLessonInput> | Prisma.ExerciseCreateWithoutLessonInput[] | Prisma.ExerciseUncheckedCreateWithoutLessonInput[]
  connectOrCreate?: Prisma.ExerciseCreateOrConnectWithoutLessonInput | Prisma.ExerciseCreateOrConnectWithoutLessonInput[]
  upsert?: Prisma.ExerciseUpsertWithWhereUniqueWithoutLessonInput | Prisma.ExerciseUpsertWithWhereUniqueWithoutLessonInput[]
  createMany?: Prisma.ExerciseCreateManyLessonInputEnvelope
  set?: Prisma.ExerciseWhereUniqueInput | Prisma.ExerciseWhereUniqueInput[]
  disconnect?: Prisma.ExerciseWhereUniqueInput | Prisma.ExerciseWhereUniqueInput[]
  delete?: Prisma.ExerciseWhereUniqueInput | Prisma.ExerciseWhereUniqueInput[]
  connect?: Prisma.ExerciseWhereUniqueInput | Prisma.ExerciseWhereUniqueInput[]
  update?: Prisma.ExerciseUpdateWithWhereUniqueWithoutLessonInput | Prisma.ExerciseUpdateWithWhereUniqueWithoutLessonInput[]
  updateMany?: Prisma.ExerciseUpdateManyWithWhereWithoutLessonInput | Prisma.ExerciseUpdateManyWithWhereWithoutLessonInput[]
  deleteMany?: Prisma.ExerciseScalarWhereInput | Prisma.ExerciseScalarWhereInput[]
}

export type ExerciseUncheckedUpdateManyWithoutLessonNestedInput = {
  create?: Prisma.XOR<Prisma.ExerciseCreateWithoutLessonInput, Prisma.ExerciseUncheckedCreateWithoutLessonInput> | Prisma.ExerciseCreateWithoutLessonInput[] | Prisma.ExerciseUncheckedCreateWithoutLessonInput[]
  connectOrCreate?: Prisma.ExerciseCreateOrConnectWithoutLessonInput | Prisma.ExerciseCreateOrConnectWithoutLessonInput[]
  upsert?: Prisma.ExerciseUpsertWithWhereUniqueWithoutLessonInput | Prisma.ExerciseUpsertWithWhereUniqueWithoutLessonInput[]
  createMany?: Prisma.ExerciseCreateManyLessonInputEnvelope
  set?: Prisma.ExerciseWhereUniqueInput | Prisma.ExerciseWhereUniqueInput[]
  disconnect?: Prisma.ExerciseWhereUniqueInput | Prisma.ExerciseWhereUniqueInput[]
  delete?: Prisma.ExerciseWhereUniqueInput | Prisma.ExerciseWhereUniqueInput[]
  connect?: Prisma.ExerciseWhereUniqueInput | Prisma.ExerciseWhereUniqueInput[]
  update?: Prisma.ExerciseUpdateWithWhereUniqueWithoutLessonInput | Prisma.ExerciseUpdateWithWhereUniqueWithoutLessonInput[]
  updateMany?: Prisma.ExerciseUpdateManyWithWhereWithoutLessonInput | Prisma.ExerciseUpdateManyWithWhereWithoutLessonInput[]
  deleteMany?: Prisma.ExerciseScalarWhereInput | Prisma.ExerciseScalarWhereInput[]
}

export type EnumExerciseTypeFieldUpdateOperationsInput = {
  set?: $Enums.ExerciseType
}

export type ExerciseCreateNestedOneWithoutAttemptsInput = {
  create?: Prisma.XOR<Prisma.ExerciseCreateWithoutAttemptsInput, Prisma.ExerciseUncheckedCreateWithoutAttemptsInput>
  connectOrCreate?: Prisma.ExerciseCreateOrConnectWithoutAttemptsInput
  connect?: Prisma.ExerciseWhereUniqueInput
}

export type ExerciseUpdateOneRequiredWithoutAttemptsNestedInput = {
  create?: Prisma.XOR<Prisma.ExerciseCreateWithoutAttemptsInput, Prisma.ExerciseUncheckedCreateWithoutAttemptsInput>
  connectOrCreate?: Prisma.ExerciseCreateOrConnectWithoutAttemptsInput
  upsert?: Prisma.ExerciseUpsertWithoutAttemptsInput
  connect?: Prisma.ExerciseWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ExerciseUpdateToOneWithWhereWithoutAttemptsInput, Prisma.ExerciseUpdateWithoutAttemptsInput>, Prisma.ExerciseUncheckedUpdateWithoutAttemptsInput>
}

export type ExerciseCreateWithoutLessonInput = {
  type: $Enums.ExerciseType
  audioUrl?: string | null
  imageUrl?: string | null
  prompt?: string | null
  correctAnswer: string
  englishTranslation?: string | null
  options?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  letterGroups?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  orderNumber: number
  attempts?: Prisma.ExerciseAttemptCreateNestedManyWithoutExerciseInput
}

export type ExerciseUncheckedCreateWithoutLessonInput = {
  id?: number
  type: $Enums.ExerciseType
  audioUrl?: string | null
  imageUrl?: string | null
  prompt?: string | null
  correctAnswer: string
  englishTranslation?: string | null
  options?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  letterGroups?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  orderNumber: number
  attempts?: Prisma.ExerciseAttemptUncheckedCreateNestedManyWithoutExerciseInput
}

export type ExerciseCreateOrConnectWithoutLessonInput = {
  where: Prisma.ExerciseWhereUniqueInput
  create: Prisma.XOR<Prisma.ExerciseCreateWithoutLessonInput, Prisma.ExerciseUncheckedCreateWithoutLessonInput>
}

export type ExerciseCreateManyLessonInputEnvelope = {
  data: Prisma.ExerciseCreateManyLessonInput | Prisma.ExerciseCreateManyLessonInput[]
  skipDuplicates?: boolean
}

export type ExerciseUpsertWithWhereUniqueWithoutLessonInput = {
  where: Prisma.ExerciseWhereUniqueInput
  update: Prisma.XOR<Prisma.ExerciseUpdateWithoutLessonInput, Prisma.ExerciseUncheckedUpdateWithoutLessonInput>
  create: Prisma.XOR<Prisma.ExerciseCreateWithoutLessonInput, Prisma.ExerciseUncheckedCreateWithoutLessonInput>
}

export type ExerciseUpdateWithWhereUniqueWithoutLessonInput = {
  where: Prisma.ExerciseWhereUniqueInput
  data: Prisma.XOR<Prisma.ExerciseUpdateWithoutLessonInput, Prisma.ExerciseUncheckedUpdateWithoutLessonInput>
}

export type ExerciseUpdateManyWithWhereWithoutLessonInput = {
  where: Prisma.ExerciseScalarWhereInput
  data: Prisma.XOR<Prisma.ExerciseUpdateManyMutationInput, Prisma.ExerciseUncheckedUpdateManyWithoutLessonInput>
}

export type ExerciseScalarWhereInput = {
  AND?: Prisma.ExerciseScalarWhereInput | Prisma.ExerciseScalarWhereInput[]
  OR?: Prisma.ExerciseScalarWhereInput[]
  NOT?: Prisma.ExerciseScalarWhereInput | Prisma.ExerciseScalarWhereInput[]
  id?: Prisma.IntFilter<"Exercise"> | number
  type?: Prisma.EnumExerciseTypeFilter<"Exercise"> | $Enums.ExerciseType
  audioUrl?: Prisma.StringNullableFilter<"Exercise"> | string | null
  imageUrl?: Prisma.StringNullableFilter<"Exercise"> | string | null
  prompt?: Prisma.StringNullableFilter<"Exercise"> | string | null
  correctAnswer?: Prisma.StringFilter<"Exercise"> | string
  englishTranslation?: Prisma.StringNullableFilter<"Exercise"> | string | null
  options?: Prisma.JsonNullableFilter<"Exercise">
  letterGroups?: Prisma.JsonNullableFilter<"Exercise">
  orderNumber?: Prisma.IntFilter<"Exercise"> | number
  lessonId?: Prisma.IntFilter<"Exercise"> | number
}

export type ExerciseCreateWithoutAttemptsInput = {
  type: $Enums.ExerciseType
  audioUrl?: string | null
  imageUrl?: string | null
  prompt?: string | null
  correctAnswer: string
  englishTranslation?: string | null
  options?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  letterGroups?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  orderNumber: number
  lesson: Prisma.LessonCreateNestedOneWithoutExercisesInput
}

export type ExerciseUncheckedCreateWithoutAttemptsInput = {
  id?: number
  type: $Enums.ExerciseType
  audioUrl?: string | null
  imageUrl?: string | null
  prompt?: string | null
  correctAnswer: string
  englishTranslation?: string | null
  options?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  letterGroups?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  orderNumber: number
  lessonId: number
}

export type ExerciseCreateOrConnectWithoutAttemptsInput = {
  where: Prisma.ExerciseWhereUniqueInput
  create: Prisma.XOR<Prisma.ExerciseCreateWithoutAttemptsInput, Prisma.ExerciseUncheckedCreateWithoutAttemptsInput>
}

export type ExerciseUpsertWithoutAttemptsInput = {
  update: Prisma.XOR<Prisma.ExerciseUpdateWithoutAttemptsInput, Prisma.ExerciseUncheckedUpdateWithoutAttemptsInput>
  create: Prisma.XOR<Prisma.ExerciseCreateWithoutAttemptsInput, Prisma.ExerciseUncheckedCreateWithoutAttemptsInput>
  where?: Prisma.ExerciseWhereInput
}

export type ExerciseUpdateToOneWithWhereWithoutAttemptsInput = {
  where?: Prisma.ExerciseWhereInput
  data: Prisma.XOR<Prisma.ExerciseUpdateWithoutAttemptsInput, Prisma.ExerciseUncheckedUpdateWithoutAttemptsInput>
}

export type ExerciseUpdateWithoutAttemptsInput = {
  type?: Prisma.EnumExerciseTypeFieldUpdateOperationsInput | $Enums.ExerciseType
  audioUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  imageUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  prompt?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  correctAnswer?: Prisma.StringFieldUpdateOperationsInput | string
  englishTranslation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  options?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  letterGroups?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  orderNumber?: Prisma.IntFieldUpdateOperationsInput | number
  lesson?: Prisma.LessonUpdateOneRequiredWithoutExercisesNestedInput
}

export type ExerciseUncheckedUpdateWithoutAttemptsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  type?: Prisma.EnumExerciseTypeFieldUpdateOperationsInput | $Enums.ExerciseType
  audioUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  imageUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  prompt?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  correctAnswer?: Prisma.StringFieldUpdateOperationsInput | string
  englishTranslation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  options?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  letterGroups?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  orderNumber?: Prisma.IntFieldUpdateOperationsInput | number
  lessonId?: Prisma.IntFieldUpdateOperationsInput | number
}

export type ExerciseCreateManyLessonInput = {
  id?: number
  type: $Enums.ExerciseType
  audioUrl?: string | null
  imageUrl?: string | null
  prompt?: string | null
  correctAnswer: string
  englishTranslation?: string | null
  options?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  letterGroups?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  orderNumber: number
}

export type ExerciseUpdateWithoutLessonInput = {
  type?: Prisma.EnumExerciseTypeFieldUpdateOperationsInput | $Enums.ExerciseType
  audioUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  imageUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  prompt?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  correctAnswer?: Prisma.StringFieldUpdateOperationsInput | string
  englishTranslation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  options?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  letterGroups?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  orderNumber?: Prisma.IntFieldUpdateOperationsInput | number
  attempts?: Prisma.ExerciseAttemptUpdateManyWithoutExerciseNestedInput
}

export type ExerciseUncheckedUpdateWithoutLessonInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  type?: Prisma.EnumExerciseTypeFieldUpdateOperationsInput | $Enums.ExerciseType
  audioUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  imageUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  prompt?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  correctAnswer?: Prisma.StringFieldUpdateOperationsInput | string
  englishTranslation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  options?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  letterGroups?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  orderNumber?: Prisma.IntFieldUpdateOperationsInput | number
  attempts?: Prisma.ExerciseAttemptUncheckedUpdateManyWithoutExerciseNestedInput
}

export type ExerciseUncheckedUpdateManyWithoutLessonInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  type?: Prisma.EnumExerciseTypeFieldUpdateOperationsInput | $Enums.ExerciseType
  audioUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  imageUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  prompt?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  correctAnswer?: Prisma.StringFieldUpdateOperationsInput | string
  englishTranslation?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  options?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  letterGroups?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  orderNumber?: Prisma.IntFieldUpdateOperationsInput | number
}


/**
 * Count Type ExerciseCountOutputType
 */

export type ExerciseCountOutputType = {
  attempts: number
}

export type ExerciseCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  attempts?: boolean | ExerciseCountOutputTypeCountAttemptsArgs
}

/**
 * ExerciseCountOutputType without action
 */
export type ExerciseCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExerciseCountOutputType
   */
  select?: Prisma.ExerciseCountOutputTypeSelect<ExtArgs> | null
}

/**
 * ExerciseCountOutputType without action
 */
export type ExerciseCountOutputTypeCountAttemptsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ExerciseAttemptWhereInput
}


export type ExerciseSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  type?: boolean
  audioUrl?: boolean
  imageUrl?: boolean
  prompt?: boolean
  correctAnswer?: boolean
  englishTranslation?: boolean
  options?: boolean
  letterGroups?: boolean
  orderNumber?: boolean
  lessonId?: boolean
  lesson?: boolean | Prisma.LessonDefaultArgs<ExtArgs>
  attempts?: boolean | Prisma.Exercise$attemptsArgs<ExtArgs>
  _count?: boolean | Prisma.ExerciseCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["exercise"]>

export type ExerciseSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  type?: boolean
  audioUrl?: boolean
  imageUrl?: boolean
  prompt?: boolean
  correctAnswer?: boolean
  englishTranslation?: boolean
  options?: boolean
  letterGroups?: boolean
  orderNumber?: boolean
  lessonId?: boolean
  lesson?: boolean | Prisma.LessonDefaultArgs<ExtArgs>
}, ExtArgs["result"]["exercise"]>

export type ExerciseSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  type?: boolean
  audioUrl?: boolean
  imageUrl?: boolean
  prompt?: boolean
  correctAnswer?: boolean
  englishTranslation?: boolean
  options?: boolean
  letterGroups?: boolean
  orderNumber?: boolean
  lessonId?: boolean
  lesson?: boolean | Prisma.LessonDefaultArgs<ExtArgs>
}, ExtArgs["result"]["exercise"]>

export type ExerciseSelectScalar = {
  id?: boolean
  type?: boolean
  audioUrl?: boolean
  imageUrl?: boolean
  prompt?: boolean
  correctAnswer?: boolean
  englishTranslation?: boolean
  options?: boolean
  letterGroups?: boolean
  orderNumber?: boolean
  lessonId?: boolean
}

export type ExerciseOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "type" | "audioUrl" | "imageUrl" | "prompt" | "correctAnswer" | "englishTranslation" | "options" | "letterGroups" | "orderNumber" | "lessonId", ExtArgs["result"]["exercise"]>
export type ExerciseInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  lesson?: boolean | Prisma.LessonDefaultArgs<ExtArgs>
  attempts?: boolean | Prisma.Exercise$attemptsArgs<ExtArgs>
  _count?: boolean | Prisma.ExerciseCountOutputTypeDefaultArgs<ExtArgs>
}
export type ExerciseIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  lesson?: boolean | Prisma.LessonDefaultArgs<ExtArgs>
}
export type ExerciseIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  lesson?: boolean | Prisma.LessonDefaultArgs<ExtArgs>
}

export type $ExercisePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Exercise"
  objects: {
    lesson: Prisma.$LessonPayload<ExtArgs>
    attempts: Prisma.$ExerciseAttemptPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    type: $Enums.ExerciseType
    audioUrl: string | null
    imageUrl: string | null
    prompt: string | null
    correctAnswer: string
    englishTranslation: string | null
    options: runtime.JsonValue | null
    letterGroups: runtime.JsonValue | null
    orderNumber: number
    lessonId: number
  }, ExtArgs["result"]["exercise"]>
  composites: {}
}

export type ExerciseGetPayload<S extends boolean | null | undefined | ExerciseDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ExercisePayload, S>

export type ExerciseCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ExerciseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ExerciseCountAggregateInputType | true
  }

export interface ExerciseDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Exercise'], meta: { name: 'Exercise' } }
  /**
   * Find zero or one Exercise that matches the filter.
   * @param {ExerciseFindUniqueArgs} args - Arguments to find a Exercise
   * @example
   * // Get one Exercise
   * const exercise = await prisma.exercise.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ExerciseFindUniqueArgs>(args: Prisma.SelectSubset<T, ExerciseFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ExerciseClient<runtime.Types.Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Exercise that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ExerciseFindUniqueOrThrowArgs} args - Arguments to find a Exercise
   * @example
   * // Get one Exercise
   * const exercise = await prisma.exercise.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ExerciseFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ExerciseFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ExerciseClient<runtime.Types.Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Exercise that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExerciseFindFirstArgs} args - Arguments to find a Exercise
   * @example
   * // Get one Exercise
   * const exercise = await prisma.exercise.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ExerciseFindFirstArgs>(args?: Prisma.SelectSubset<T, ExerciseFindFirstArgs<ExtArgs>>): Prisma.Prisma__ExerciseClient<runtime.Types.Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Exercise that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExerciseFindFirstOrThrowArgs} args - Arguments to find a Exercise
   * @example
   * // Get one Exercise
   * const exercise = await prisma.exercise.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ExerciseFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ExerciseFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ExerciseClient<runtime.Types.Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Exercises that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExerciseFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Exercises
   * const exercises = await prisma.exercise.findMany()
   * 
   * // Get first 10 Exercises
   * const exercises = await prisma.exercise.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const exerciseWithIdOnly = await prisma.exercise.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ExerciseFindManyArgs>(args?: Prisma.SelectSubset<T, ExerciseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Exercise.
   * @param {ExerciseCreateArgs} args - Arguments to create a Exercise.
   * @example
   * // Create one Exercise
   * const Exercise = await prisma.exercise.create({
   *   data: {
   *     // ... data to create a Exercise
   *   }
   * })
   * 
   */
  create<T extends ExerciseCreateArgs>(args: Prisma.SelectSubset<T, ExerciseCreateArgs<ExtArgs>>): Prisma.Prisma__ExerciseClient<runtime.Types.Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Exercises.
   * @param {ExerciseCreateManyArgs} args - Arguments to create many Exercises.
   * @example
   * // Create many Exercises
   * const exercise = await prisma.exercise.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ExerciseCreateManyArgs>(args?: Prisma.SelectSubset<T, ExerciseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Exercises and returns the data saved in the database.
   * @param {ExerciseCreateManyAndReturnArgs} args - Arguments to create many Exercises.
   * @example
   * // Create many Exercises
   * const exercise = await prisma.exercise.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Exercises and only return the `id`
   * const exerciseWithIdOnly = await prisma.exercise.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ExerciseCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ExerciseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Exercise.
   * @param {ExerciseDeleteArgs} args - Arguments to delete one Exercise.
   * @example
   * // Delete one Exercise
   * const Exercise = await prisma.exercise.delete({
   *   where: {
   *     // ... filter to delete one Exercise
   *   }
   * })
   * 
   */
  delete<T extends ExerciseDeleteArgs>(args: Prisma.SelectSubset<T, ExerciseDeleteArgs<ExtArgs>>): Prisma.Prisma__ExerciseClient<runtime.Types.Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Exercise.
   * @param {ExerciseUpdateArgs} args - Arguments to update one Exercise.
   * @example
   * // Update one Exercise
   * const exercise = await prisma.exercise.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ExerciseUpdateArgs>(args: Prisma.SelectSubset<T, ExerciseUpdateArgs<ExtArgs>>): Prisma.Prisma__ExerciseClient<runtime.Types.Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Exercises.
   * @param {ExerciseDeleteManyArgs} args - Arguments to filter Exercises to delete.
   * @example
   * // Delete a few Exercises
   * const { count } = await prisma.exercise.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ExerciseDeleteManyArgs>(args?: Prisma.SelectSubset<T, ExerciseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Exercises.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExerciseUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Exercises
   * const exercise = await prisma.exercise.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ExerciseUpdateManyArgs>(args: Prisma.SelectSubset<T, ExerciseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Exercises and returns the data updated in the database.
   * @param {ExerciseUpdateManyAndReturnArgs} args - Arguments to update many Exercises.
   * @example
   * // Update many Exercises
   * const exercise = await prisma.exercise.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Exercises and only return the `id`
   * const exerciseWithIdOnly = await prisma.exercise.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ExerciseUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ExerciseUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Exercise.
   * @param {ExerciseUpsertArgs} args - Arguments to update or create a Exercise.
   * @example
   * // Update or create a Exercise
   * const exercise = await prisma.exercise.upsert({
   *   create: {
   *     // ... data to create a Exercise
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Exercise we want to update
   *   }
   * })
   */
  upsert<T extends ExerciseUpsertArgs>(args: Prisma.SelectSubset<T, ExerciseUpsertArgs<ExtArgs>>): Prisma.Prisma__ExerciseClient<runtime.Types.Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Exercises.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExerciseCountArgs} args - Arguments to filter Exercises to count.
   * @example
   * // Count the number of Exercises
   * const count = await prisma.exercise.count({
   *   where: {
   *     // ... the filter for the Exercises we want to count
   *   }
   * })
  **/
  count<T extends ExerciseCountArgs>(
    args?: Prisma.Subset<T, ExerciseCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ExerciseCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Exercise.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExerciseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ExerciseAggregateArgs>(args: Prisma.Subset<T, ExerciseAggregateArgs>): Prisma.PrismaPromise<GetExerciseAggregateType<T>>

  /**
   * Group by Exercise.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExerciseGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ExerciseGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ExerciseGroupByArgs['orderBy'] }
      : { orderBy?: ExerciseGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ExerciseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExerciseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Exercise model
 */
readonly fields: ExerciseFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Exercise.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ExerciseClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  lesson<T extends Prisma.LessonDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.LessonDefaultArgs<ExtArgs>>): Prisma.Prisma__LessonClient<runtime.Types.Result.GetResult<Prisma.$LessonPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  attempts<T extends Prisma.Exercise$attemptsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Exercise$attemptsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ExerciseAttemptPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Exercise model
 */
export interface ExerciseFieldRefs {
  readonly id: Prisma.FieldRef<"Exercise", 'Int'>
  readonly type: Prisma.FieldRef<"Exercise", 'ExerciseType'>
  readonly audioUrl: Prisma.FieldRef<"Exercise", 'String'>
  readonly imageUrl: Prisma.FieldRef<"Exercise", 'String'>
  readonly prompt: Prisma.FieldRef<"Exercise", 'String'>
  readonly correctAnswer: Prisma.FieldRef<"Exercise", 'String'>
  readonly englishTranslation: Prisma.FieldRef<"Exercise", 'String'>
  readonly options: Prisma.FieldRef<"Exercise", 'Json'>
  readonly letterGroups: Prisma.FieldRef<"Exercise", 'Json'>
  readonly orderNumber: Prisma.FieldRef<"Exercise", 'Int'>
  readonly lessonId: Prisma.FieldRef<"Exercise", 'Int'>
}
    

// Custom InputTypes
/**
 * Exercise findUnique
 */
export type ExerciseFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Exercise
   */
  select?: Prisma.ExerciseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Exercise
   */
  omit?: Prisma.ExerciseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExerciseInclude<ExtArgs> | null
  /**
   * Filter, which Exercise to fetch.
   */
  where: Prisma.ExerciseWhereUniqueInput
}

/**
 * Exercise findUniqueOrThrow
 */
export type ExerciseFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Exercise
   */
  select?: Prisma.ExerciseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Exercise
   */
  omit?: Prisma.ExerciseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExerciseInclude<ExtArgs> | null
  /**
   * Filter, which Exercise to fetch.
   */
  where: Prisma.ExerciseWhereUniqueInput
}

/**
 * Exercise findFirst
 */
export type ExerciseFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Exercise
   */
  select?: Prisma.ExerciseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Exercise
   */
  omit?: Prisma.ExerciseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExerciseInclude<ExtArgs> | null
  /**
   * Filter, which Exercise to fetch.
   */
  where?: Prisma.ExerciseWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Exercises to fetch.
   */
  orderBy?: Prisma.ExerciseOrderByWithRelationInput | Prisma.ExerciseOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Exercises.
   */
  cursor?: Prisma.ExerciseWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Exercises from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Exercises.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Exercises.
   */
  distinct?: Prisma.ExerciseScalarFieldEnum | Prisma.ExerciseScalarFieldEnum[]
}

/**
 * Exercise findFirstOrThrow
 */
export type ExerciseFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Exercise
   */
  select?: Prisma.ExerciseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Exercise
   */
  omit?: Prisma.ExerciseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExerciseInclude<ExtArgs> | null
  /**
   * Filter, which Exercise to fetch.
   */
  where?: Prisma.ExerciseWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Exercises to fetch.
   */
  orderBy?: Prisma.ExerciseOrderByWithRelationInput | Prisma.ExerciseOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Exercises.
   */
  cursor?: Prisma.ExerciseWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Exercises from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Exercises.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Exercises.
   */
  distinct?: Prisma.ExerciseScalarFieldEnum | Prisma.ExerciseScalarFieldEnum[]
}

/**
 * Exercise findMany
 */
export type ExerciseFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Exercise
   */
  select?: Prisma.ExerciseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Exercise
   */
  omit?: Prisma.ExerciseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExerciseInclude<ExtArgs> | null
  /**
   * Filter, which Exercises to fetch.
   */
  where?: Prisma.ExerciseWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Exercises to fetch.
   */
  orderBy?: Prisma.ExerciseOrderByWithRelationInput | Prisma.ExerciseOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Exercises.
   */
  cursor?: Prisma.ExerciseWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Exercises from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Exercises.
   */
  skip?: number
  distinct?: Prisma.ExerciseScalarFieldEnum | Prisma.ExerciseScalarFieldEnum[]
}

/**
 * Exercise create
 */
export type ExerciseCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Exercise
   */
  select?: Prisma.ExerciseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Exercise
   */
  omit?: Prisma.ExerciseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExerciseInclude<ExtArgs> | null
  /**
   * The data needed to create a Exercise.
   */
  data: Prisma.XOR<Prisma.ExerciseCreateInput, Prisma.ExerciseUncheckedCreateInput>
}

/**
 * Exercise createMany
 */
export type ExerciseCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Exercises.
   */
  data: Prisma.ExerciseCreateManyInput | Prisma.ExerciseCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Exercise createManyAndReturn
 */
export type ExerciseCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Exercise
   */
  select?: Prisma.ExerciseSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Exercise
   */
  omit?: Prisma.ExerciseOmit<ExtArgs> | null
  /**
   * The data used to create many Exercises.
   */
  data: Prisma.ExerciseCreateManyInput | Prisma.ExerciseCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExerciseIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Exercise update
 */
export type ExerciseUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Exercise
   */
  select?: Prisma.ExerciseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Exercise
   */
  omit?: Prisma.ExerciseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExerciseInclude<ExtArgs> | null
  /**
   * The data needed to update a Exercise.
   */
  data: Prisma.XOR<Prisma.ExerciseUpdateInput, Prisma.ExerciseUncheckedUpdateInput>
  /**
   * Choose, which Exercise to update.
   */
  where: Prisma.ExerciseWhereUniqueInput
}

/**
 * Exercise updateMany
 */
export type ExerciseUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Exercises.
   */
  data: Prisma.XOR<Prisma.ExerciseUpdateManyMutationInput, Prisma.ExerciseUncheckedUpdateManyInput>
  /**
   * Filter which Exercises to update
   */
  where?: Prisma.ExerciseWhereInput
  /**
   * Limit how many Exercises to update.
   */
  limit?: number
}

/**
 * Exercise updateManyAndReturn
 */
export type ExerciseUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Exercise
   */
  select?: Prisma.ExerciseSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Exercise
   */
  omit?: Prisma.ExerciseOmit<ExtArgs> | null
  /**
   * The data used to update Exercises.
   */
  data: Prisma.XOR<Prisma.ExerciseUpdateManyMutationInput, Prisma.ExerciseUncheckedUpdateManyInput>
  /**
   * Filter which Exercises to update
   */
  where?: Prisma.ExerciseWhereInput
  /**
   * Limit how many Exercises to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExerciseIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Exercise upsert
 */
export type ExerciseUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Exercise
   */
  select?: Prisma.ExerciseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Exercise
   */
  omit?: Prisma.ExerciseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExerciseInclude<ExtArgs> | null
  /**
   * The filter to search for the Exercise to update in case it exists.
   */
  where: Prisma.ExerciseWhereUniqueInput
  /**
   * In case the Exercise found by the `where` argument doesn't exist, create a new Exercise with this data.
   */
  create: Prisma.XOR<Prisma.ExerciseCreateInput, Prisma.ExerciseUncheckedCreateInput>
  /**
   * In case the Exercise was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ExerciseUpdateInput, Prisma.ExerciseUncheckedUpdateInput>
}

/**
 * Exercise delete
 */
export type ExerciseDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Exercise
   */
  select?: Prisma.ExerciseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Exercise
   */
  omit?: Prisma.ExerciseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExerciseInclude<ExtArgs> | null
  /**
   * Filter which Exercise to delete.
   */
  where: Prisma.ExerciseWhereUniqueInput
}

/**
 * Exercise deleteMany
 */
export type ExerciseDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Exercises to delete
   */
  where?: Prisma.ExerciseWhereInput
  /**
   * Limit how many Exercises to delete.
   */
  limit?: number
}

/**
 * Exercise.attempts
 */
export type Exercise$attemptsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExerciseAttempt
   */
  select?: Prisma.ExerciseAttemptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExerciseAttempt
   */
  omit?: Prisma.ExerciseAttemptOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExerciseAttemptInclude<ExtArgs> | null
  where?: Prisma.ExerciseAttemptWhereInput
  orderBy?: Prisma.ExerciseAttemptOrderByWithRelationInput | Prisma.ExerciseAttemptOrderByWithRelationInput[]
  cursor?: Prisma.ExerciseAttemptWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ExerciseAttemptScalarFieldEnum | Prisma.ExerciseAttemptScalarFieldEnum[]
}

/**
 * Exercise without action
 */
export type ExerciseDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Exercise
   */
  select?: Prisma.ExerciseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Exercise
   */
  omit?: Prisma.ExerciseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExerciseInclude<ExtArgs> | null
}
